%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.1.0
%%For: (user) ()
%%Title: (\677\734\661\663\672\716\667\716\660\755.ai)
%%CreationDate: 8/19/2019 12:55 PM
%%Canvassize: 16383
%%BoundingBox: 77 -515 320 -81
%%HiResBoundingBox: 77.1733 -514.1855 319.5273 -81.1748
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (GOK_Blue)
%%+ (GOK_Red)
%%CMYKCustomColor: 1 0.7 0.2 0.4 (GOK_Blue)
%%+ 0 1 0.8 0 (GOK_Red)
%%CMYKProcessColor: 1 1 1 1 ([\670\702\703\747\702\757\661\742])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 206.5 -298.5 206.5 -298.5
%AI3_TileBox: -80.0903 -704.3809 491.1094 109.0996
%AI3_DocumentPreview: None
%AI5_ArtSize: 411.0195 595.2803
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -346 33 1 1039 896 18 0 0 239 390 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-100 -694
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 72 128 8
%%BeginData: 7488 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD09FFA8590607060606597EFD3DFFAF280606284B948D93694C2E
%A8FD3AFFA9060606948DB08DB08DB08CB57084FD38FFA80606288D93C3CA
%CFA8CA9AB58CB069A8FD08FF7DA8FFFF7DFFFFA87DFD04A8FFFFA8A8FFFF
%FFA8A8FD19FF06060693C3FD08FFC38DB093FD07FF527D52A8A852FFFF84
%FD047D52FFFF7D527D7D7D527DFD18FF59060670C3FD0AFFC38CB09AFD05
%FF7D7DFFFF52A852FD07FF52FFFFA852A87DA852A8FD18FF2F06069AFD0C
%FFC28DB5CAFD05FF52A97D7DA87DFD07FF52FFFFA8527DA87D527DFD17FF
%A8060605C9FD0CFFCAB58CCAFD05FFA8277DFFA852FFFFFF7DA87DA852FF
%FFFFFD05A8FD18FF7E060606A8FD07FF7E7E7EFFFFFFC2B0C3FD06FF7DA8
%FFA87DFFFFFF7DA8A884FFFFFF7D7D527D527D52FD17FF7D0006067EFD06
%FF2806000606A9FFCA8CC2FD04FF7DFD04527D52FFA87D527D527D7DA8FD
%04FF27FD1AFF59FD0406FD05FF2EFD05062FFFCAB0BCFD05FFA8FFA8FFA8
%7DFFFFA8FFFD05A8FD04FF7DA8FD19FF7EFD05067E7E8428FD0706A8CF8C
%C3FD0AFFA8FD28FFA806060DFD07060DFD0506A9CAB0C9FD34FFFD1006A9
%C38DFD05FFFD05A8FFA8FFFFA9A8FD05FFA8A8FFA87DFD05FFA8FFFFFFA8
%FFFFA8A8FFA8A8FFFFA8FD07FF84FD0E062FFF93C3FD05FFA87D7D7DA87D
%A87DA87D7D7DA8A8FF7D7D7DFF7D7DA8A87DA87D7D7DA87D7D7DFFFD077D
%A87D7DA8FD05FF2F05FD0C06AFA7B5CAFD05FFFD057DA87D7D52A87DFF52
%FFA87D7DA8FFA8A8A87D7D7E7D597D527D7DA8A8A87D7DA8A8527D7DA87D
%7DFD05FFAF2FFD05060DFD0506A8FFBCCAFD12FFA8FD0FFFA8A8FD14FFA8
%2F00FD0806A8FFC2A1FD3BFF7E280D0606062F59FFCAC9CAFD3EFFA8A9A8
%FD04FFCACFFDFCFFFDFCFFFDFCFFFD65FFA8FD44FFA97E2F2F060D2F5AA8
%FD3EFF5306060627706F6F454C53AFFD3BFF280606708DB08CB08DB08D93
%4CA9FD39FF0606068D8CC2A1CAA1C399B08CB06FA8FD37FF2E060694BCFD
%07FFCABC8DB094FD36FF7D06064CA0FD0AFFC28CB0A0FD35FF2F06069AFD
%0CFFBC8DB5FD07FFA87DFFFFA87DFFFFA87DA87D7D7DFFFFFF7DA9FFFFFF
%A87DFD15FFA8060605C9FD0CFFA8B08CCAFD05FF7D527D27FF7D7DFFFFFD
%057D527DFFFF7D4B7D527D277DFD15FF7E060628A7FD07FFA8A8A8FFFFFF
%BCB0C3FD05FF52FFFFA87DA87DFD07FF7DA8FFFF527DA8A8A87D7DFD15FF
%7D0006067EFD06FF530606062EFFFFCA8CC2FD05FF527DFF4BA87D7DFD07
%FF7D7DFFFF7D527D7D7D527DFD15FF59FD0406FD05FF53FD05062FFFCAB0
%BCFD05FFA87D52A8FFA87DFFFFFF7DA8A8A87D7DFD04FFA8FFA8FFA8FD15
%FF7EFD0506A8A8A92FFD0706A8CF8CC3FD06FFA87DFFFF7D7DFFFFFF7DA8
%A852FFA8FFA87D527D527D527DA8FD14FFA806060D0606062F0606060DFD
%0506A9CAB0C9FD05FF7D7D527D7DA87DFFA8A8527D7D52A8A8FFFFA8FFA8
%52A8FFA8FD16FFFD1006A9C98CFD05FFA8A87DA87DA87D7DFFA852FD067D
%FD05FF52FD19FF7EFD0E062EFFBBBCFD0CFFA8FD28FFA82EFD0D06A9A8B5
%CAFD36FFA806060D0606060DFD05067EFFBCC3FD38FFA80600FD08067EFF
%C2A0FD3BFF7EFD05062F2FA9CFC9C9FD3EFF7EA87EA8A8FFFFCAA8FDFCFF
%FDFCFFFDFCFFFD65FF7E84598484FD27FF7D592F2F2F5AA8FD12FFA95906
%070606282E287EA9FD22FF59060606284C4C4C522FA9FD0FFF590606064B
%938DB08C8D45527EFD1FFF7E2E06064B8D8CB08CB08D8D4B7EFD0DFF5306
%064C8DB093BC93B58CB08D707DFD1DFFA80606288DB099C3C3C399B08DB0
%69A2FD0BFF5306064C8CC3CAFFFFFFCAC993B08C8D7DFD1BFFA80606288C
%C2CAFD05FFA8C28CB08DA8FD09FFA806064C93FD09FFC3B08D9AAFFD1AFF
%5306066FC9FD09FFCA8DB093FD09FF2F00066FFD0BFFC3B08CC3FD19FFA8
%060627C3FD0BFFC98CB0A0FD08FF060606C9FD0CFFBCB093FD19FF530606
%76FD0DFFC28CBCFD07FF59060628A8FD0DFF8DB0A7FD18FF2F06064CFD09
%FFA8FFFFFFCAB08CFD07FF7E060606FD07FFA8592F59A8FFFFC28CCAFD18
%FF06060653FD07FF5A06062FAFFFFF99B0CAFD06FF2F0606067DFD05FF7E
%0600060606A8FFC3B0A1FD17FFA8FD0406A9FD05FF2F00FD0406FFFFC38C
%CAFD06FF59FD0406A8FFFFFFA8FD060653FFCA8DC9FD18FFFD0506A9FFFF
%FF59FD060653FFC3B0CAFD06FF53FD05062F7E2F0605FD0606FFA1B0A1FD
%18FF2F00FD04062F2E0600FD06062EFFC38CFD07FFA8FD09060D0606060D
%0606FFC98DFD19FF53FD08060D0606060D060628FFBCBCFD08FFFD0F0628
%FF99BCFD19FFA8FD0F0659FFB5A1FD08FF7DFD0E06A8FFB0CAFD1AFF53FD
%0D062FAFCA8DFD0AFF28FD0B06002FFFC29AFD1BFFA80600FD0B0659FF93
%C9FD0BFFFD05060DFD05062FFFCABBFD1DFFA82F0606060DFD060659FFBC
%C3FD0DFF2FFD080653FFCA9AFD1FFFA853060600060606052F7EFFA0C9FD
%0FFFA85A2E2F065353A9FFCAC3FD23FF59532E5353A8FFFFC9CFFD19FFCA
%FD2BFFCAFDE5FF7DFFA8A8A8FFFFA8A8FFA8FD09FFA8FD1DFFA8FFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FD07FF52A87D7DA87DA8A8A87DA87DA87DFFA8FF
%A8A87D7DFD18FFA87D7DFF7DA8FFA8527D527D7DFFFF7DA8A8A87DA8FD06
%FF7D7D527D59A8FD077DFF52A8A8FD047DFD17FFA852A8A87DA87DFFA8FF
%AFFF7D7DFFFF527D7D7D52FD07FFFD06A8FFA8A87DFFA8A8FF7DFFFFA8A8
%A8FD19FF52FF7D7D7DA8FD05FFA852FFFF767DA87D7DA8FD14FFA8FD1EFF
%A8277DFF7D7DFFFFA87EA87D7DFFFFA8A87DA87EFD04FFA8FD07FFA8FD07
%FFA8FFFFFFA8FD1CFF7DA8FF7DA8FFFF7DA87DA8FFFFA8FD067DFFFF52FD
%0EA8FFA852A87D7D7DFD04A87DA8A8FD13FFA85252FD047DFF7D52527D52
%7DA8FFFFFF52FD05FF7DA8FD057D527D7DA87D7D7DA8FFA8527D7DA87DA8
%52A87DA87D7DFD18FFA8FD0CFFA8FD05FF7DFFA87D7DA8A87D7DA87D7D7D
%A8A8FF7DFF7DA8A8A87D7D7DA8A8A87DFD35FFA87DFDFCFFFDFCFFFDFCFF
%FD6BFFA87E7D8484FD40FFA859FD04060528065384FD3CFF7D0D06064B93
%8DB08DB5694C59FD3AFF5306004C8DB093BC99B58CB08C8D52FD38FF7E06
%064C8DC3CAFD04FFCFBCB08DB57DFD36FFA806062893CFFD08FFC9B08C8D
%A8FD05FF7D7DFF7D7DA8A8FFFFFF7DFFFFFF7DA8FD0AFFA87DFD14FF5906
%066FCFFD0AFFCAB08CBCFD05FFA827FF52A8A8FF7D7DA8A8A87DA87D7DA8
%7DA8FFA8A8FF847DA87D7DFD14FF060600A1FD0CFFA1B08CCFFD04FF7D52
%52FD047D847D7D7DA852A87DA852A87D7D7DFFA87DA87D7DA8FD13FFA806
%0628A7FD0DFF93B0C3FD04FFA87D7DA8A87DA8A8A97DA8A87D7DA87D7DA8
%FF52A8FFFF7D7DA8A8A8FD13FF7E060605A8FD06FFA85328537EFFFFC38C
%C3FD06FFA8FFAFFFA8FFFFFFA8FFA8FFFFFFA8FFA87DFD04FFA8FFA8FD14
%FF5306060653FD05FFA8FD05067EFFCAB09AFD17FFA8FD1BFF7E00060606
%7DFFFFFF84FD0706A8CF8CC2FD06FFA8FD09FFA8FD22FF7EFD05062F7E53
%2F0606060D060606A9CFB0C3FD04FFA87DA8FD09FFA8A8FD09FF7DA8FFFD
%04A8FFFFFF7DFD0EFFFD100684CA8DCAFD04FF7D7DA8FF7D7DA87D7DA87D
%A87DA87D7D7DA852A8FFFFA87D7DA8277D52A8A87DA8A8A8FD047DFD09FF
%53FD0F06FFA0B5FD05FFA852A87DA8A87D7DFF52FD047DA8A87D7DA87DFF
%FFA8527D7D7DFF7DA8A87D7D7DA87DFF7D7DFD09FF7EFD0D06007EFFB5A1
%FD05FF7DA8FFA8FD047DFF7D52A87DA87D7D527DA87DA8FF52FFA87D52FF
%7DA8527D7DA87DA8A87D52FD0AFF53FD04060D0606060D0606062FFFC399
%FD0BFFA8FD08FFA852A8FD08FFA8FD05FFA8FD05FFA8FD0CFF2EFD0B06A8
%CA93FD15FFA8FD24FF590DFD070653FFCF9AFD3CFFA87E2E2E062F53A8FF
%CAA1FD34FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\303\337\300\373) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe \266\363\300\314\272\352 \306\344\300\316\306\256 \307\303\267\257\261\327\300\316) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe \272\355\267\273\265\345 \307\303\267\257\261\327-\300\316) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe \275\311\272\274\310\255) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \306\320\305\317 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \306\320\305\317 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \276\306\306\256 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \276\306\306\256 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe \272\327\261\333\276\276 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \273\352\306\367 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \273\352\306\367 \272\352\267\257\275\254 \307\303\267\257\261\327-\300\316) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\276\356\265\265\272\361 \304\304\306\304\277\356\265\345 \270\360\276\347) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (\660\713\701\644\673\766\700\670\667\716 \710\761\671\714\707\717\660\724 \707\717\661\742)
(\660\713\701\644\673\766\700\670\667\716 \710\761\671\714\707\717\660\724 \707\717\661\742) 0 2 Bd
[
0
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 1 1 25 0 %_BS
%_0 0 0 1 1 25 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\664\651\670\643\675\672\670\647\707\721 \671\746\673\747\707\774)
(\664\651\670\643\675\672\670\647\707\721 \671\746\673\747\707\774) 1 2 Bd
[
<
000001010101020202030303030404040505050506060607070707080808090909090A0A0A0A0B0B
0B0B0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F1010101011111111121212121313131314141414151515
151616161616171717171818181819191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E
1E1E1F1F1F1F20202020202121212121222222222223232323232424242424242525252525262626
26262627272727272828282828282929292929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D
2D2D2D2D2E2E2E2E2E2E2E2F2F2F2F2F2F2F30303030303030313131313131313232323232323232
33333333333333333434343434343434353535353535353535363636363636363636373737373737
373737383838383838383838383839393939393939393939393A3A3A3A3A3A3A3A3A3A3A3A3B3B3B
3B3B3B3B3B3B3B3B3B3B3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D
3D3D3D3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3F3F3F3F3F3F3F3F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F40404040404040404040404040404040
4040404040404040404040404040404040
>
<
000102030405060708090A0B0C0D0E0F10111213141515161718191A1B1C1D1E1F20212223232425
262728292A2B2C2C2D2E2F30313233333435363738393A3A3B3C3D3E3F3F40414243444445464748
48494A4B4C4C4D4E4F505051525354545556575758595A5A5B5C5D5D5E5F60606162636364656666
676868696A6A6B6C6D6D6E6F6F7071717273737475757677777879797A7B7B7C7D7D7E7F7F808081
828283848485858687878888898A8A8B8B8C8C8D8E8E8F8F90909192929393949495959697979898
99999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9AAAAABABAC
ACACADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B8B9B9BABABABBBBBB
BCBCBCBDBDBDBEBEBEBFBFBFC0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C5C6C6C6C7C7C7C7C8
C8C8C8C9C9C9C9CACACACACBCBCBCBCCCCCCCCCCCDCDCDCDCECECECECECFCFCFCFCFD0D0D0D0D0D0
D1D1D1D1D1D2D2D2D2D2D2D2D3D3D3D3D3D3D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5D5D6D6D6D6D6D6
D6D6D6D6D7D7D7D7D7D7D7D7D7D7D7D7D7D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D9D9
D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9
>
<
00010102030404050606070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A
1B1C1C1D1D1E1F1F202121222223242425262627272829292A2A2B2C2C2D2D2E2F2F303031313233
3334343535363737383839393A3A3B3C3C3D3D3E3E3F3F4040414142434344444545464647474848
49494A4A4B4B4C4C4D4D4E4E4F4F505051515152525353545455555656575758585859595A5A5B5B
5C5C5C5D5D5E5E5F5F5F606061616162626363646464656566666667676868686969696A6A6B6B6B
6C6C6C6D6D6E6E6E6F6F6F7070707171727272737373747474757575767676777777777878787979
797A7A7A7B7B7B7C7C7C7C7D7D7D7E7E7E7E7F7F7F80808080818181818282828283838383848484
848585858586868686878787878888888888898989898A8A8A8A8A8B8B8B8B8B8C8C8C8C8C8D8D8D
8D8D8D8E8E8E8E8E8F8F8F8F8F8F9090909090909091919191919192929292929292939393939393
93939494949494949494949595959595959595959696969696969696969696969797979797979797
97979797979798989898989898989898989898989898989898989999999999999999999999999999
9999999999999999999999999999999999
>
<
00000000000101010101010101020202020202020202030303030303030303040404040404040404
04050505050505050505060606060606060606060707070707070707070708080808080808080808
09090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C
0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F
0F0F0F0F101010101010101010101010101011111111111111111111111111111112121212121212
12121212121212121213131313131313131313131313131313131314141414141414141414141414
14141414141415151515151515151515151515151515151515151516161616161616161616161616
16161616161616161616161717171717171717171717171717171717171717171717171717171717
18181818181818181818181818181818181818181818181818181818181818181818181818181919
19191919191919191919191919191919191919191919191919191919191919191919191919191919
19191919191919191919191919191919191919191919191919191919191919191919191919191919
191919191919191919191919191919191A
>
1 %_Br
[
0 0 0 0 1 28 48.538 %_BS
%_0 0 0 0 1 28 48.538 Bs
0.25 0.85 0.6 0.1 1 50 100 %_BS
%_0.25 0.85 0.6 0.1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\677\666\700\672 \660\713\701\644\673\766 \672\761\663\727\706\703)
(\677\666\700\672 \660\713\701\644\673\766 \672\761\663\727\706\703) 1 3 Bd
[
0.2
0.2
0.2
1
1 %_Br
0.2
0.2
0.2
1
1 %_Br
[
0.2 0.2 0.2 1 1 68.3944 73.8792 %_BS
%_0.2 0.2 0.2 1 1 68.3944 73.8792 Bs
0.2 0.2 0.2 1 1 31.8603 88.7329 %_BS
%_0.2 0.2 0.2 1 1 31.8603 88.7329 Bs
0.2 0.2 0.2 1 1 50 100 %_BS
%_0.2 0.2 0.2 1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\701\726\710\662\673\766, \663\753\666\773, \700\732\701\726\673\766)
(\701\726\710\662\673\766, \663\753\666\773, \700\732\701\726\673\766) 0 7 Bd
[
0.1
<
B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B
8A89888786858483828180
>
0.8
0
1 %_Br
<
403F3E3D3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A29282727262524232322
2120201F1E1D1D1C1B1A1A
>
<
D9D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C0C0BFBEBDBCBCBB
BAB9B9B8B7B6B6B5B4B3B3
>
<
999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1
C2C3C4C5C6C7C8C9CACBCC
>
<
1A191818171716161515141413131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606
0505040403030202010100
>
1 %_Br
<
1A1A1A1B1B1C1C1D1D1D1E1E1F1F2020202121222223232324242525262626272728282929292A2A
2B2B2C2C2C2D2D2E2E2F2F2F30303131323232333334343535353636373738383839393A3A3B3B3B
3C3C3D3D3E3E3E3F3F40
>
<
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9
>
<
CCCBCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B7B7B6B6
B5B5B4B3B3B2B2B1B0B0AFAFAEAEADACACABABAAAAA9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A0A09F9F
9E9E9D9C9C9B9B9A9A99
>
<
000001010101020202030303030404040505050506060607070707080808090909090A0A0A0B0B0B
0B0C0C0C0D0D0D0D0E0E0E0F0F0F0F10101011111111121212131313131414141515151516161617
1717171818181919191A
>
1 %_Br
<
807F7E7E7D7D7C7B7B7A7A79797877777676757574737372727171706F6F6E6E6D6D6C6B6B6A6A69
696867676666656564636362626161605F5F5E5E5D5D5C5B5B5A5A59595857575656555554535352
525151504F4F4E4E4D4D4C4B4B4A4A49484847474646454444434342424140403F3F3E3E3D3C3C3B
3B3A3A39383837373636353434333332323130302F2F2E2E2D2C2C2B2B2A2A292828272726262524
24232322222120201F1F1E1E1D1C1C1B1B1A1A
>
<
E6E5E4E4E3E3E2E1E1E0E0DFDFDEDDDDDCDCDBDBDAD9D9D8D8D7D7D6D5D5D4D4D3D3D2D1D1D0D0CF
CFCECDCDCCCCCBCBCAC9C9C8C8C7C7C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBDBDBCBCBBBBBAB9B9B8
B8B7B7B6B5B5B4B4B3B3B2B1B1B0B0AFAEAEADADACACABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1
A1A0A09F9E9E9D9D9C9C9B9A9A9999989897969695959494939292919190908F8E8E8D8D8C8C8B8A
8A898988888786868585848483828281818080
>
<
1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041
42434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566676869
6A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F9091
92939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC
>
0
1 %_Br
<
1A1A1B1B1C1C1D1E1E1F1F20202122222323242425262627272828292A2A2B2B2C2C2D2E2E2F2F30
303132323333343435363637373838393A3A3B3B3C3C3D3E3E3F3F40404142424343444445464647
474848494A4A4B4B4C4D4D4E4E4F4F50515152525353545555565657575859595A5A5B5B5C5D5D5E
5E5F5F60616162626363646565666667676869696A6A6B6B6C6D6D6E6E6F6F707171727273737475
75767677777879797A7A7B7B7C7D7D7E7E7F80
>
<
8080818182828384848585868687888889898A8A8B8C8C8D8D8E8E8F909091919292939494959596
9697989899999A9A9B9C9C9D9D9E9E9FA0A0A1A1A2A2A3A4A4A5A5A6A6A7A8A8A9A9AAAAABACACAD
ADAEAEAFB0B0B1B1B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABBBBBCBCBDBDBEBFBFC0C0C1C1C2C3C3C4
C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCDCECFCFD0D0D1D1D2D3D3D4D4D5D5D6D7D7D8D8D9D9DADB
DBDCDCDDDDDEDFDFE0E0E1E1E2E3E3E4E4E5E6
>
<
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D
7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D
2C2B2A292827262524232221201F1E1D1C1B1A
>
0
1 %_Br
0.1
<
B3B1B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A0A09F9E9D9D9C9B9A9A99989897969695949493
9292919190908F8F8E8E8D8D8C8C8B8B8A8A89898888888787878686868585858484848383838383
82828282818181818181818080808080808080808080808080808080
>
0.8
0
1 %_Br
[
0.1 0.5 0.8 0 1 50 100 %_BS
%_0.1 0.5 0.8 0 1 50 100 Bs
0.1 0.7 0.8 0 1 50 90 %_BS
%_0.1 0.7 0.8 0 1 50 90 Bs
0.25 0.85 0.6 0.1 1 50 79 %_BS
%_0.25 0.85 0.6 0.1 1 50 79 Bs
0.1 0.5 0.8 0 1 50 64 %_BS
%_0.1 0.5 0.8 0 1 50 64 Bs
0.5 0.9 0.1 0 1 50 47 %_BS
%_0.5 0.9 0.1 0 1 50 47 Bs
0.1 0.5 0.8 0 1 50 30 %_BS
%_0.1 0.5 0.8 0 1 50 30 Bs
0.1 0.7 0.8 0 1 28 0 %_BS
%_0.1 0.7 0.8 0 1 28 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (\661\644\707\720 \671\731\665\717\706\707)
(\661\644\707\720 \671\731\665\717\706\707) 0 0 54.7383 54.7393 [
%AI3_Tile
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 0 m
5.8643 0.9766 L
2.9316 0.9766 L
2.9316 0 L
5.8643 0 L
f
0 5.8652 m
0.9766 5.8652 L
0.9766 2.9316 L
0 2.9316 L
0 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 0.9766 m
2.9316 2.9316 L
0.9766 2.9316 L
0.9766 0.9766 L
2.9316 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 2.9316 m
5.8643 5.8652 L
2.9316 5.8652 L
2.9316 2.9316 L
5.8643 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 0 m
0.9766 0.9766 L
0 0.9766 L
0 0 L
0.9766 0 L
f
27.3682 0 m
27.3682 0.9766 L
20.5254 0.9766 L
20.5254 0 L
27.3682 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 2.9316 m
27.3682 5.8652 L
20.5254 5.8652 L
20.5254 2.9316 L
27.3682 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 9.7734 m
27.3682 14.6611 L
20.5254 14.6611 L
20.5254 9.7734 L
27.3682 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 5.8652 m
20.5254 9.7734 L
14.6602 9.7734 L
14.6602 5.8652 L
20.5254 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 0.9766 m
9.7734 2.9316 L
5.8643 2.9316 L
5.8643 0.9766 L
9.7734 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 2.9316 m
14.6602 5.8652 L
9.7734 5.8652 L
9.7734 2.9316 L
14.6602 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 0 m
14.6602 0.9766 L
9.7734 0.9766 L
9.7734 0 L
14.6602 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 0.9766 m
20.5254 2.9316 L
14.6602 2.9316 L
14.6602 0.9766 L
20.5254 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 27.3691 m
0.9766 27.3691 L
0.9766 20.5264 L
0 20.5264 L
0 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 27.3691 m
5.8643 27.3691 L
5.8643 20.5264 L
2.9316 20.5264 L
2.9316 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 27.3691 m
14.6602 27.3691 L
14.6602 20.5264 L
9.7734 20.5264 L
9.7734 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 20.5264 m
9.7734 20.5264 L
9.7734 14.6611 L
5.8643 14.6611 L
5.8643 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 9.7734 m
2.9316 9.7734 L
2.9316 5.8652 L
0.9766 5.8652 L
0.9766 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 14.6611 m
5.8643 14.6611 L
5.8643 9.7734 L
2.9316 9.7734 L
2.9316 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 14.6611 m
0.9766 14.6611 L
0.9766 9.7734 L
0 9.7734 L
0 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0.9766 20.5264 m
2.9316 20.5264 L
2.9316 14.6611 L
0.9766 14.6611 L
0.9766 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 14.6611 m
20.5254 20.5264 L
14.6602 20.5264 L
14.6602 14.6611 L
20.5254 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 5.8652 m
9.7734 9.7734 L
5.8643 9.7734 L
5.8643 5.8652 L
9.7734 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 9.7734 m
14.6602 14.6611 L
9.7734 14.6611 L
9.7734 9.7734 L
14.6602 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1252 0.13 0 0.0576 k
 0.1252 0.13 0 0.0576 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 20.5264 m
27.3682 27.3691 L
20.5254 27.3691 L
20.5254 20.5264 L
27.3682 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 54.7393 m
48.873 53.7627 L
51.8066 53.7627 L
51.8066 54.7393 L
48.873 54.7393 L
f
54.7383 48.874 m
53.7617 48.874 L
53.7617 51.8076 L
54.7383 51.8076 L
54.7383 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 53.7627 m
51.8066 51.8076 L
53.7617 51.8076 L
53.7617 53.7627 L
51.8066 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 51.8076 m
48.873 48.874 L
51.8066 48.874 L
51.8066 51.8076 L
48.873 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 54.7393 m
53.7617 53.7627 L
54.7383 53.7627 L
54.7383 54.7393 L
53.7617 54.7393 L
f
27.3682 54.7393 m
27.3682 53.7627 L
34.2109 53.7627 L
34.2109 54.7393 L
27.3682 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 51.8076 m
27.3682 48.874 L
34.2109 48.874 L
34.2109 51.8076 L
27.3682 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 44.9639 m
27.3682 40.0762 L
34.2109 40.0762 L
34.2109 44.9639 L
27.3682 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 48.874 m
34.2109 44.9639 L
40.0752 44.9639 L
40.0752 48.874 L
34.2109 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 53.7627 m
44.9639 51.8076 L
48.873 51.8076 L
48.873 53.7627 L
44.9639 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 51.8076 m
40.0752 48.874 L
44.9639 48.874 L
44.9639 51.8076 L
40.0752 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 54.7393 m
40.0752 53.7627 L
44.9639 53.7627 L
44.9639 54.7393 L
40.0752 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 53.7627 m
34.2109 51.8076 L
40.0752 51.8076 L
40.0752 53.7627 L
34.2109 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 27.3691 m
53.7617 27.3691 L
53.7617 34.2109 L
54.7383 34.2109 L
54.7383 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 27.3691 m
48.873 27.3691 L
48.873 34.2109 L
51.8066 34.2109 L
51.8066 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 27.3691 m
40.0752 27.3691 L
40.0752 34.2109 L
44.9639 34.2109 L
44.9639 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 34.2109 m
44.9639 34.2109 L
44.9639 40.0762 L
48.873 40.0762 L
48.873 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 44.9639 m
51.8066 44.9639 L
51.8066 48.874 L
53.7617 48.874 L
53.7617 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 40.0762 m
48.873 40.0762 L
48.873 44.9639 L
51.8066 44.9639 L
51.8066 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 40.0762 m
53.7617 40.0762 L
53.7617 44.9639 L
54.7383 44.9639 L
54.7383 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
53.7617 34.2109 m
51.8066 34.2109 L
51.8066 40.0762 L
53.7617 40.0762 L
53.7617 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 40.0762 m
34.2109 34.2109 L
40.0752 34.2109 L
40.0752 40.0762 L
34.2109 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 48.874 m
44.9639 44.9639 L
48.873 44.9639 L
48.873 48.874 L
44.9639 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 44.9639 m
40.0752 40.0762 L
44.9639 40.0762 L
44.9639 44.9639 L
40.0752 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1252 0.13 0 0.0576 k
 0.1252 0.13 0 0.0576 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 34.2109 m
27.3682 27.3691 L
34.2109 27.3691 L
34.2109 34.2109 L
27.3682 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 54.7393 m
2.9316 53.7627 L
0.9766 53.7627 L
0.9766 54.7393 L
2.9316 54.7393 L
f
0 51.8076 m
0 53.7627 L
0.9766 53.7627 L
0.9766 51.8076 L
0 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 48.874 m
2.9316 51.8076 L
0.9766 51.8076 L
0.9766 48.874 L
2.9316 48.874 L
f
5.8643 53.7627 m
5.8643 51.8076 L
2.9316 51.8076 L
2.9316 53.7627 L
5.8643 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 54.7393 m
9.7734 53.7627 L
5.8643 53.7627 L
5.8643 54.7393 L
9.7734 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 51.8076 m
14.6602 53.7627 L
9.7734 53.7627 L
9.7734 51.8076 L
14.6602 51.8076 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 48.874 m
20.5254 51.8076 L
14.6602 51.8076 L
14.6602 48.874 L
20.5254 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 44.9639 m
27.3682 48.874 L
20.5254 48.874 L
20.5254 44.9639 L
27.3682 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 53.7627 m
27.3682 51.8076 L
20.5254 51.8076 L
20.5254 53.7627 L
27.3682 53.7627 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 54.7393 m
14.6602 53.7627 L
20.5254 53.7627 L
20.5254 54.7393 L
14.6602 54.7393 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 48.874 m
9.7734 51.8076 L
5.8643 51.8076 L
5.8643 48.874 L
9.7734 48.874 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 44.9639 m
14.6602 48.874 L
9.7734 48.874 L
9.7734 44.9639 L
14.6602 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 40.0762 m
20.5254 44.9639 L
14.6602 44.9639 L
14.6602 40.0762 L
20.5254 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 34.2109 m
27.3682 40.0762 L
20.5254 40.0762 L
20.5254 34.2109 L
27.3682 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 44.9639 m
0 48.874 L
0.9766 48.874 L
0.9766 44.9639 L
0 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 44.9639 m
5.8643 48.874 L
2.9316 48.874 L
2.9316 44.9639 L
5.8643 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 40.0762 m
9.7734 44.9639 L
5.8643 44.9639 L
5.8643 40.0762 L
9.7734 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 44.9639 m
2.9316 40.0762 L
0.9766 40.0762 L
0.9766 44.9639 L
2.9316 44.9639 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 34.2109 m
0 40.0762 L
0.9766 40.0762 L
0.9766 34.2109 L
0 34.2109 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
2.9316 27.3691 m
2.9316 34.2109 L
0.9766 34.2109 L
0.9766 27.3691 L
2.9316 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
5.8643 40.0762 m
5.8643 34.2109 L
2.9316 34.2109 L
2.9316 40.0762 L
5.8643 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
9.7734 27.3691 m
9.7734 34.2109 L
5.8643 34.2109 L
5.8643 27.3691 L
9.7734 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
14.6602 40.0762 m
14.6602 34.2109 L
9.7734 34.2109 L
9.7734 40.0762 L
14.6602 40.0762 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
20.5254 27.3691 m
20.5254 34.2109 L
14.6602 34.2109 L
14.6602 27.3691 L
20.5254 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 0 m
51.8066 0.9766 L
53.7617 0.9766 L
53.7617 0 L
51.8066 0 L
f
54.7383 2.9316 m
54.7383 0.9766 L
53.7617 0.9766 L
53.7617 2.9316 L
54.7383 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 5.8652 m
51.8066 2.9316 L
53.7617 2.9316 L
53.7617 5.8652 L
51.8066 5.8652 L
f
48.873 0.9766 m
48.873 2.9316 L
51.8066 2.9316 L
51.8066 0.9766 L
48.873 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 0 m
44.9639 0.9766 L
48.873 0.9766 L
48.873 0 L
44.9639 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 2.9316 m
40.0752 0.9766 L
44.9639 0.9766 L
44.9639 2.9316 L
40.0752 2.9316 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 5.8652 m
34.2109 2.9316 L
40.0752 2.9316 L
40.0752 5.8652 L
34.2109 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 9.7734 m
27.3682 5.8652 L
34.2109 5.8652 L
34.2109 9.7734 L
27.3682 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 0.9766 m
27.3682 2.9316 L
34.2109 2.9316 L
34.2109 0.9766 L
27.3682 0.9766 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 0 m
40.0752 0.9766 L
34.2109 0.9766 L
34.2109 0 L
40.0752 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 5.8652 m
44.9639 2.9316 L
48.873 2.9316 L
48.873 5.8652 L
44.9639 5.8652 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 9.7734 m
40.0752 5.8652 L
44.9639 5.8652 L
44.9639 9.7734 L
40.0752 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 14.6611 m
34.2109 9.7734 L
40.0752 9.7734 L
40.0752 14.6611 L
34.2109 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
27.3682 20.5264 m
27.3682 14.6611 L
34.2109 14.6611 L
34.2109 20.5264 L
27.3682 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 9.7734 m
54.7383 5.8652 L
53.7617 5.8652 L
53.7617 9.7734 L
54.7383 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 9.7734 m
48.873 5.8652 L
51.8066 5.8652 L
51.8066 9.7734 L
48.873 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 14.6611 m
44.9639 9.7734 L
48.873 9.7734 L
48.873 14.6611 L
44.9639 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 9.7734 m
51.8066 14.6611 L
53.7617 14.6611 L
53.7617 9.7734 L
51.8066 9.7734 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 1 1 0 0.46 k
 1 1 0 0.46 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
54.7383 20.5264 m
54.7383 14.6611 L
53.7617 14.6611 L
53.7617 20.5264 L
54.7383 20.5264 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8261 0.8261 0 0.38 k
 0.8261 0.8261 0 0.38 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
51.8066 27.3691 m
51.8066 20.5264 L
53.7617 20.5264 L
53.7617 27.3691 L
51.8066 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6791 0.6905 0 0.3124 k
 0.6791 0.6905 0 0.3124 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
48.873 14.6611 m
48.873 20.5264 L
51.8066 20.5264 L
51.8066 14.6611 L
48.873 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4654 0.46 0 0.214 k
 0.4654 0.46 0 0.214 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
44.9639 27.3691 m
44.9639 20.5264 L
48.873 20.5264 L
48.873 27.3691 L
44.9639 27.3691 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2793 0.2761 0 0.1285 k
 0.2793 0.2761 0 0.1285 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
40.0752 14.6611 m
40.0752 20.5264 L
44.9639 20.5264 L
44.9639 14.6611 L
40.0752 14.6611 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1926 0.1904 0 0.0886 k
 0.1926 0.1904 0 0.0886 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.2109 27.3691 m
34.2109 20.5264 L
40.0752 20.5264 L
40.0752 27.3691 L
34.2109 27.3691 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 40)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7982.4521 7891.5967 m
-7590.6909 7891.5967 L
-7590.6909 7799.9077 L
-7982.4521 7799.9077 L
-7982.4521 7891.5967 L
n
0 O
0 0 0 1 k
1 XR
-7595.3535 7833.9199 m
-7597.1113 7833.9199 -7716.7817 7836.0918 -7792.6519 7837.4717 C
-7813.4663 7836.5352 -7834.2529 7835.2222 -7855.0547 7833.5024 C
-7857.5327 7833.1509 -7860.3472 7832.7949 -7861.8584 7832.6006 c
-7862.7114 7832.4863 -7863.5732 7832.3853 -7864.4375 7832.2935 C
-7863.9829 7832.0605 -7863.54 7831.7998 -7863.1167 7831.4941 C
-7862.25 7830.7324 -7861.3955 7829.8325 -7860.8735 7828.4541 C
-7860.8979 7828.1685 -7860.6997 7827.8188 -7860.6523 7827.5293 c
-7860.5532 7826.9116 -7860.6382 7826.1631 -7860.7319 7825.6274 c
-7860.7939 7825.2725 -7860.9551 7825.0254 -7861.0259 7824.7314 c
-7861.0488 7824.6348 -7860.9785 7824.5757 -7861.0059 7824.5024 c
-7861.1396 7824.1484 -7861.5313 7823.5518 -7861.7539 7823.2261 c
-7861.8579 7823.0757 -7861.9873 7822.9775 -7862.1035 7822.8188 c
-7862.1196 7822.7964 -7862.0669 7822.7349 -7862.0928 7822.7061 c
-7862.6484 7822.0664 -7863.4312 7821.5415 -7864.3955 7821.0757 c
-7864.4546 7821.0508 -7864.4639 7821.1445 -7864.5366 7821.0869 C
-7864.8213 7820.9653 -7865.1143 7820.8535 -7865.3945 7820.7915 c
-7866.8965 7820.4629 -7868.7163 7820.8477 -7869.8027 7821.6328 c
-7870.7998 7822.3555 -7871.5308 7823.8623 -7871.4678 7825.0742 c
-7871.4126 7826.1094 -7870.6665 7827.2573 -7869.4458 7828.0352 c
-7868.3604 7828.7295 -7867.0479 7828.9829 -7866.2373 7828.3589 C
-7866.6499 7828.2295 -7866.9688 7828.0332 -7867.0811 7827.7524 C
-7867.0908 7827.4766 -7867.0967 7827.1992 -7866.8755 7826.8589 C
-7866.4517 7826.4863 -7865.7925 7826.2485 -7865.1235 7826.7158 c
-7864.1846 7827.3701 -7864.0728 7828.7886 -7865.0342 7829.5356 C
-7865.3086 7829.6406 -7865.5586 7829.8789 -7865.75 7829.9829 c
-7866.1826 7830.2192 -7866.5586 7830.3853 -7866.9751 7830.5435 c
-7868.0938 7830.9595 -7869.4839 7831.4185 -7870.5327 7831.5967 c
-7870.7114 7831.6284 -7870.8989 7831.6475 -7871.0806 7831.6733 C
-7874.4038 7831.3789 -7877.54 7831.0693 -7880.1416 7830.5264 C
-7880.1138 7830.5229 -7880.0908 7830.5244 -7880.0586 7830.5205 c
-7879.2378 7830.4199 -7878.6309 7830.2524 -7877.9043 7830.0127 c
-7877.6328 7829.9238 -7877.3184 7829.9116 -7877.0825 7829.8149 c
-7876.9985 7829.7856 -7876.9409 7829.6597 -7876.8472 7829.6133 c
-7876.5371 7829.4604 -7876.2129 7829.3662 -7875.8999 7829.1597 c
-7874.9097 7828.5054 -7873.8774 7827.3359 -7873.7617 7825.8677 C
-7873.9463 7824.8262 -7874.3643 7823.8525 -7875.5938 7823.0781 c
-7875.7217 7822.9951 -7875.8662 7822.96 -7875.9995 7822.8828 C
-7877.8516 7822.2168 -7879.5913 7823.3135 -7879.8066 7825.2061 C
-7879.7119 7825.3755 -7879.6499 7825.5527 -7879.6616 7825.7524 C
-7879.2939 7826.4492 -7877.9033 7827.0557 -7877.3057 7826.6143 C
-7877.6133 7826.5566 -7877.7495 7826.5254 -7877.8638 7826.2637 C
-7877.8892 7825.6069 -7877.0679 7825.4336 -7876.6528 7826.0176 C
-7876.4966 7826.7021 -7876.7676 7827.2524 -7877.2939 7827.8101 c
-7877.5068 7828.0352 -7877.7837 7828.1685 -7878.0566 7828.3545 c
-7878.4199 7828.6016 -7878.7495 7828.8828 -7879.1118 7829.0332 c
-7879.4385 7829.1685 -7879.8115 7829.2012 -7880.1445 7829.2886 c
-7880.2349 7829.3101 -7880.2969 7829.3613 -7880.3706 7829.3789 c
-7880.6274 7829.4336 -7880.8359 7829.5142 -7881.0879 7829.5469 c
-7881.4209 7829.5854 -7881.7739 7829.5488 -7882.1528 7829.5854 c
-7882.3398 7829.6055 -7882.5195 7829.6943 -7882.7144 7829.7109 c
-7882.8413 7829.7207 -7882.9722 7829.7207 -7883.1025 7829.7222 C
-7885.8135 7828.8213 -7888.0957 7827.6094 -7889.9814 7825.2783 c
-7893.6704 7820.7222 -7888.0415 7816.5566 -7886.9902 7820.5967 C
-7888.9668 7822.0352 -7892.5874 7825.1196 -7884.8892 7825.2471 C
-7876.6045 7823.7549 -7883.6982 7808.4917 -7893.6509 7812.5576 c
-7902.0151 7815.9741 -7898.1328 7824.6382 -7892.4658 7828.2935 c
-7883.9902 7833.7559 -7874.5376 7834.4917 -7864.7012 7834.5845 C
-7875.3862 7839.0488 -7889.9243 7836.4028 -7897.9897 7828.3804 c
-7902.1011 7824.2935 -7906.0435 7817.9912 -7904.8193 7811.8896 c
-7903.5742 7805.6816 -7897.1616 7811.4238 -7902.0957 7811.4424 C
-7901.8896 7817.0054 -7888.6387 7810.9648 -7894.9307 7802.8271 c
-7900.6011 7795.4917 -7910.5698 7803.5225 -7912.3242 7809.9478 c
-7918.0239 7830.8359 -7888.3545 7836.7119 -7874.3813 7837.4238 C
-7886.1143 7840.7749 -7902.3892 7838.2734 -7913.5547 7833.7856 c
-7917.9663 7832.0093 -7922.9707 7828.8926 -7925.5479 7824.7773 c
-7929.4619 7818.5264 -7922.4268 7814.2837 -7921.8955 7816.4028 c
-7921.4697 7818.0957 -7927.3765 7818.6235 -7922.8267 7821.6992 c
-7918.8091 7824.4185 -7915.2759 7818.2095 -7914.4619 7815.0781 c
-7910.6782 7800.5317 -7932.0601 7802.4604 -7934.3667 7816.1982 c
-7939.5103 7846.8271 -7893.3071 7840.4575 -7877.4902 7839.5928 C
-7877.7124 7839.7612 -7877.9331 7839.9189 -7878.1543 7840.0825 C
-7883.4346 7841.585 -7888.6416 7843.7861 -7893.46 7846.5469 C
-7907.9546 7848.2813 -7920.7495 7837.8901 -7936.5913 7832.6152 c
-7945.5635 7829.6284 -7956.0933 7833.9277 -7964.2778 7829.3145 c
-7968.6235 7826.8545 -7971.6982 7824.2656 -7973.2959 7819.0518 C
-7974.9092 7810.1104 -7965.2979 7808.9717 -7967.1396 7813.6416 C
-7968.8428 7813.9688 -7968.1772 7812.8345 -7969.3354 7812.8413 C
-7973.2861 7816.5479 -7965.0244 7821.7314 -7961.1606 7818.4316 c
-7954.4497 7812.7031 -7959.2563 7804.3325 -7966.0864 7802.0557 C
-7984.5703 7802.25 -7985 7824.8613 -7979.0474 7837.3589 c
-7963.2217 7870.585 -7929.1445 7858.5825 -7901.5376 7851.5479 C
-7905.2817 7854.0732 -7907.8975 7857.6421 -7910.5747 7861.2158 c
-7915.2197 7867.4165 -7917.6694 7876.8545 -7909.0024 7880.8613 C
-7908.1616 7884.9829 -7906.6392 7888.8853 -7902.5669 7890.7695 c
-7897.7471 7893 -7892.8457 7890.5581 -7891.5508 7885.4512 C
-7891.4766 7882.6719 -7892.1968 7880.8262 -7894.5938 7879.3887 c
-7896.1733 7878.4414 -7901.5176 7878.5308 -7898.8574 7881.5342 C
-7896.9663 7880.0415 -7897.1323 7882.4863 -7898.0112 7883.6006 C
-7900.8823 7883.5693 -7901.5771 7881.4863 -7901.5156 7878.5181 c
-7901.5151 7878.4956 -7901.5142 7878.4688 -7901.5146 7878.4429 C
-7901.3574 7871.1367 -7900.1343 7865.3237 -7898.0718 7860.7285 C
-7898.0713 7860.73 -7898.0708 7860.7314 -7898.0698 7860.7324 c
-7897.8242 7861.2158 -7897.4819 7861.5 -7897.2485 7861.8945 c
-7897.1729 7862.0225 -7897.2495 7862.1382 -7897.1753 7862.2334 c
-7896.8262 7862.6855 -7895.9971 7863.3701 -7895.5313 7863.7397 c
-7895.3135 7863.9116 -7895.0835 7863.9985 -7894.8477 7864.1724 c
-7894.8125 7864.1973 -7894.8613 7864.3101 -7894.8115 7864.3413 c
-7893.7256 7865.0176 -7892.3638 7865.4277 -7890.7661 7865.6709 C
-7890.6699 7865.6816 -7890.6978 7865.5435 -7890.5669 7865.5933 C
-7890.1035 7865.6406 -7889.6309 7865.6733 -7889.1982 7865.6382 c
-7886.8862 7865.4453 -7884.4316 7864.0845 -7883.2129 7862.4668 c
-7882.0942 7860.9854 -7881.7095 7858.4854 -7882.3379 7856.7646 c
-7882.8774 7855.2949 -7884.4629 7853.9692 -7886.5684 7853.3901 c
-7888.4419 7852.8735 -7890.4492 7853.0845 -7891.3408 7854.3477 C
-7890.6875 7854.3535 -7890.1406 7854.4941 -7889.8545 7854.8477 C
-7889.7178 7855.2422 -7889.5859 7855.6382 -7889.7539 7856.2261 C
-7890.2002 7856.9541 -7891.0469 7857.5894 -7892.2178 7857.2124 c
-7893.4604 7856.8135 -7894.2119 7855.5781 -7894.0532 7854.3486 C
-7888.7505 7848.2031 -7881.0386 7845.6465 -7872.2539 7845.0527 C
-7872.2886 7845.0688 -7872.3218 7845.0796 -7872.3604 7845.0972 c
-7873.5015 7845.6064 -7874.3027 7846.1143 -7875.2437 7846.7832 c
-7875.5957 7847.0332 -7876.0439 7847.1909 -7876.3428 7847.4316 c
-7876.4492 7847.5166 -7876.4766 7847.7222 -7876.5913 7847.8301 c
-7876.9707 7848.1895 -7877.3975 7848.4688 -7877.7563 7848.9063 c
-7878.8945 7850.2886 -7879.8662 7852.4341 -7879.3809 7854.6016 C
-7878.6523 7856.0225 -7877.6162 7857.2437 -7875.4995 7857.8145 c
-7875.2788 7857.8755 -7875.0542 7857.8623 -7874.8276 7857.9185 C
-7871.8613 7858.0527 -7869.8369 7855.7021 -7870.3667 7852.8755 C
-7870.5781 7852.6733 -7870.7471 7852.4429 -7870.8184 7852.1509 C
-7871.6582 7851.3101 -7873.9336 7851.0508 -7874.5996 7851.9517 C
-7874.1309 7851.9004 -7873.9199 7851.8848 -7873.6387 7852.2109 C
-7873.3105 7853.1475 -7874.4189 7853.7612 -7875.2759 7853.1045 C
-7875.8052 7852.1865 -7875.6587 7851.2695 -7875.1479 7850.2314 c
-7874.9409 7849.8101 -7874.5991 7849.5 -7874.2881 7849.1104 c
-7873.8735 7848.5933 -7873.5239 7848.0415 -7873.0669 7847.6621 c
-7872.6563 7847.3232 -7872.1318 7847.1094 -7871.6899 7846.8364 c
-7871.5708 7846.7646 -7871.5039 7846.6636 -7871.4043 7846.6069 c
-7871.0596 7846.4111 -7870.7935 7846.2031 -7870.4438 7846.0469 c
-7869.9819 7845.8413 -7869.4561 7845.7373 -7868.9253 7845.5142 c
-7868.6636 7845.4063 -7868.4443 7845.1948 -7868.1709 7845.085 c
-7868.0063 7845.0215 -7867.8311 7844.9688 -7867.6592 7844.9141 C
-7866.2695 7844.9185 -7864.8613 7844.9575 -7863.4375 7845.0342 c
-7861.7285 7845.0796 -7859.4653 7845.0933 -7857.5728 7845.1665 C
-7825.4688 7841.6533 -7792.98 7840.73 -7760.4746 7840.2822 C
-7687.0664 7841.6152 -7596.8774 7843.2485 -7595.3535 7843.2485 c
-7592.7773 7843.2485 -7590.6909 7841.1597 -7590.6909 7838.5845 c
-7590.6909 7836.0078 -7592.7773 7833.9199 -7595.3535 7833.9199 c
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 10pt. \305\270\277\370/ Adobe ArtOnPath Br) -
(ush Tool/ \301\331\261\342/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(10pt. \705\670\677\770)
(1 10 10 75 75 -20 110 1 0 1 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\701\731\661\742)
(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([\670\702\703\747\702\757\661\742]) 0 Xs
([\670\702\703\747\702\757\661\742])
Pc
0 0 0 0 k
(\710\762\673\766)
Pc
0 0 0 1 k
(\660\713\701\644)
Pc
0 1 1 0 k
(CMYK \673\641\660\655)
Pc
0 0 1 0 k
(CMYK \663\753\666\773)
Pc
1 0 1 0 k
(CMYK \663\754\673\766)
Pc
1 0 0 0 k
(CMYK \673\747\700\714\676\710)
Pc
1 1 0 0 k
(CMYK \706\704\666\773)
Pc
0 1 0 0 k
(CMYK \670\666\701\650\705\670)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (\660\713\701\644\673\766\700\670\667\716 \710\761\671\714\707\717\660\724 \707\717\661\742) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\660\713\701\644\673\766\700\670\667\716 \710\761\671\714\707\717\660\724 \707\717\661\742)
Pc
Bb
0 0 0 0 Bh
2 (\677\666\700\672 \660\713\701\644\673\766 \672\761\663\727\706\703) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\677\666\700\672 \660\713\701\644\673\766 \672\761\663\727\706\703)
Pc
Bb
2 (\701\726\710\662\673\766, \663\753\666\773, \700\732\701\726\673\766) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\701\726\710\662\673\766, \663\753\666\773, \700\732\701\726\673\766)
Pc
Bb
0 0 0 0 Bh
2 (\664\651\670\643\675\672\670\647\707\721 \671\746\673\747\707\774) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\664\651\670\643\675\672\670\647\707\721 \671\746\673\747\707\774)
Pc
(\661\644\707\720 \671\731\665\717\706\707) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(\661\644\707\720 \671\731\665\717\706\707)
Pc
0 1 0.8 0 (GOK_Red) 0 x
(GOK_Red)
Pc
1 0.7 0.2 0.4 (GOK_Blue) 0 x
(GOK_Blue)
Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100)
Pc
0 0 0 0.899994 k
(C=0 M=0 Y=0 K=90)
Pc
0 0 0 0.799988 k
(C=0 M=0 Y=0 K=80)
Pc
0 0 0 0.699997 k
(C=0 M=0 Y=0 K=70)
Pc
0 0 0 0.599991 k
(C=0 M=0 Y=0 K=60)
Pc
0 0 0 0.5 k
(C=0 M=0 Y=0 K=50)
Pc
0 0 0 0.399994 k
(C=0 M=0 Y=0 K=40)
Pc
0 0 0 0.299988 k
(C=0 M=0 Y=0 K=30)
Pc
0 0 0 0.199997 k
(C=0 M=0 Y=0 K=20)
Pc
0 0 0 0.099991 k
(C=0 M=0 Y=0 K=10)
Pc
0 0 0 0.049988 k
(C=0 M=0 Y=0 K=5)
Pc
0.1 0.7 0.8 0 k
(C=10 M=70 Y=80 K=0)
Pc
0.1 0.5 0.8 0 k
(C=10 M=50 Y=80 K=0)
Pc
0.65 0.1 1 0 k
(C=65 M=10 Y=100 K=0)
Pc
0.5 0.9 0.1 0 k
(C=50 M=90 Y=10 K=0)
Pc
0.25 0.85 0.6 0.1 k
(C=25 M=85 Y=60 K=10)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(\267\271\300\314\276\356 1) Ln
0 A
u
u
*u
0 O
0 0 0 0.8 k
0 J 0 j 1 w 10 M []0 d0 XR
101.5142 -377.3086 m
101.5142 -387.375 L
99.8975 -387.375 L
99.8975 -379.2715 L
97.2695 -387.375 L
95.709 -387.375 L
93.0811 -379.2715 L
93.0811 -387.375 L
91.4639 -387.375 L
91.4639 -377.3086 L
93.9473 -377.3086 L
96.4893 -385.1504 L
99.0308 -377.3086 l
101.5142 -377.3086 L
f
*U
*u
105.501 -378.1035 m
105.501 -378.3828 105.3975 -378.625 105.1904 -378.832 c
104.9834 -379.0391 104.7358 -379.1426 104.4478 -379.1426 c
104.1582 -379.1426 103.9111 -379.0391 103.7031 -378.832 c
103.4961 -378.625 103.3931 -378.3828 103.3931 -378.1035 c
103.3931 -377.8145 103.4961 -377.5664 103.7031 -377.3594 c
103.9111 -377.1523 104.1582 -377.0488 104.4478 -377.0488 c
104.7358 -377.0488 104.9834 -377.1523 105.1904 -377.3594 c
105.3975 -377.5664 105.501 -377.8145 105.501 -378.1035 c
f
103.6387 -387.375 m
103.6387 -380.1387 L
105.2852 -380.1387 L
105.2852 -387.375 l
103.6387 -387.375 L
f
*U
*u
109.0391 -383.7344 m
109.0391 -387.375 L
107.4072 -387.375 L
107.4072 -380.1387 L
108.9824 -380.1387 L
108.9824 -381.1074 L
109.1738 -380.7695 109.4536 -380.4961 109.8193 -380.2832 c
110.1851 -380.0723 110.5801 -379.9648 111.0039 -379.9648 c
111.8604 -379.9648 112.5459 -380.2578 113.0615 -380.8398 c
113.5767 -381.4219 113.8335 -382.1992 113.8335 -383.1719 c
113.8335 -387.375 L
112.188 -387.375 L
112.188 -383.5918 L
112.188 -382.8203 112.062 -382.25 111.812 -381.8789 c
111.561 -381.5098 111.1763 -381.3242 110.6572 -381.3242 c
110.3867 -381.3242 110.1245 -381.4121 109.8691 -381.5898 c
109.6143 -381.7695 109.4199 -382.0117 109.2847 -382.3203 c
109.1211 -382.6758 109.0391 -383.1484 109.0391 -383.7344 c
f
*U
*u
117.7622 -378.1035 m
117.7622 -378.3828 117.6592 -378.625 117.4521 -378.832 c
117.2446 -379.0391 116.9971 -379.1426 116.708 -379.1426 c
116.4189 -379.1426 116.1709 -379.0391 115.9644 -378.832 c
115.7573 -378.625 115.6533 -378.3828 115.6533 -378.1035 c
115.6533 -377.8145 115.7573 -377.5664 115.9644 -377.3594 c
116.1709 -377.1523 116.4189 -377.0488 116.708 -377.0488 c
116.9971 -377.0488 117.2446 -377.1523 117.4521 -377.3594 c
117.6592 -377.5664 117.7622 -377.8145 117.7622 -378.1035 c
f
115.8989 -387.375 m
115.8989 -380.1387 L
117.5459 -380.1387 L
117.5459 -387.375 l
115.8989 -387.375 L
f
*U
*u
119.0049 -386.0313 m
120.0293 -384.9785 L
120.3193 -385.373 120.6357 -385.6797 120.9839 -385.9023 c
121.3198 -386.1035 121.6821 -386.2051 122.0669 -386.2051 c
122.4321 -386.2051 122.7427 -386.1309 122.9971 -385.9805 c
123.252 -385.832 123.3809 -385.6328 123.3809 -385.3828 c
123.3809 -385.1309 123.2568 -384.9355 123.0127 -384.7969 c
122.7666 -384.6582 122.4761 -384.5254 122.1387 -384.4004 c
121.7432 -384.2754 121.3389 -384.1348 120.9258 -383.9805 c
120.3672 -383.7793 119.9575 -383.5195 119.6978 -383.2012 c
119.437 -382.8828 119.3071 -382.5215 119.3071 -382.1172 c
119.3071 -381.5215 119.5869 -381.0137 120.146 -380.5938 c
120.7041 -380.1758 121.3633 -379.9648 122.1245 -379.9648 c
122.9326 -379.9648 123.5928 -380.1582 124.1025 -380.543 c
124.3623 -380.7461 124.5693 -380.9961 124.7236 -381.2949 c
123.7129 -382.2773 L
123.5791 -382.0449 123.4189 -381.8574 123.2354 -381.7129 c
122.9194 -381.4336 122.5186 -381.2949 122.0371 -381.2949 c
121.7573 -381.2949 121.5151 -381.3652 121.3081 -381.5039 c
121.1011 -381.6426 120.9976 -381.8086 120.9976 -382.002 c
120.9976 -382.2129 121.1138 -382.3926 121.3442 -382.5371 c
121.5747 -382.6816 121.9175 -382.8203 122.3696 -382.9551 c
122.5327 -383.0039 122.7202 -383.0625 122.9326 -383.1289 c
123.6357 -383.3594 124.168 -383.6582 124.5283 -384.0234 c
124.8896 -384.3906 125.0703 -384.8281 125.0703 -385.3379 c
125.0703 -385.9355 124.7822 -386.4531 124.2041 -386.8906 c
123.626 -387.3281 122.8892 -387.5488 121.9941 -387.5488 c
121.2441 -387.5488 120.5791 -387.375 120.0015 -387.0273 c
119.6162 -386.7969 119.2837 -386.4648 119.0049 -386.0313 c
f
*U
*u
128.5947 -377.8145 m
128.5947 -380.1387 L
130.168 -380.1387 L
130.168 -381.4668 L
128.5947 -381.4668 L
128.5947 -385.1504 L
128.5947 -385.498 128.6777 -385.7344 128.8467 -385.8652 c
129.0166 -385.9961 129.2539 -386.0605 129.5615 -386.0605 c
130.168 -386.0605 L
130.168 -387.375 L
129.1709 -387.375 L
128.3906 -387.375 127.8232 -387.2012 127.4678 -386.8555 c
127.1113 -386.5078 126.9326 -385.9941 126.9326 -385.3105 c
126.9326 -381.4668 L
125.6904 -381.4668 L
125.6904 -380.1387 L
126.9326 -380.1387 L
126.9326 -377.8145 l
128.5947 -377.8145 L
f
*U
*u
131.6553 -387.375 m
131.6553 -380.1387 L
133.2012 -380.1387 L
133.2012 -381.2227 L
133.4404 -380.8672 133.7354 -380.5918 134.082 -380.3984 c
134.4951 -380.1484 134.9814 -380.0234 135.54 -380.0234 c
135.6553 -380.0234 L
135.6553 -381.4961 L
135.4834 -381.4961 L
134.7988 -381.4961 134.2549 -381.7031 133.8506 -382.1172 c
133.4756 -382.5215 133.2881 -383.1523 133.2881 -384.0098 c
133.2881 -387.375 l
131.6553 -387.375 L
f
*U
*u
139.2373 -387.0996 m
136.3916 -380.1387 L
138.0967 -380.1387 L
140.0596 -385.0781 L
142.0107 -380.1387 L
143.7002 -380.1387 L
139.6709 -390.1758 L
137.9951 -390.1758 l
139.2373 -387.0996 L
f
*U
*u
151.9463 -387.5488 m
150.8877 -387.5488 149.9844 -387.1836 149.2393 -386.457 c
148.4932 -385.7305 148.1191 -384.832 148.1191 -383.7637 c
148.1191 -382.6953 148.4932 -381.7949 149.2393 -381.0625 c
149.9844 -380.332 150.8877 -379.9648 151.9463 -379.9648 c
153.0146 -379.9648 153.9209 -380.332 154.6611 -381.0625 c
155.4033 -381.7949 155.7734 -382.6953 155.7734 -383.7637 c
155.7734 -384.832 155.4033 -385.7305 154.6611 -386.457 c
153.9209 -387.1836 153.0146 -387.5488 151.9463 -387.5488 c
f
1 D
151.9463 -386.1895 m
152.543 -386.1895 153.0557 -385.9609 153.4844 -385.5039 c
153.9131 -385.0469 154.126 -384.4668 154.126 -383.7637 c
154.126 -383.0703 153.9131 -382.4922 153.4844 -382.0234 c
153.0557 -381.5566 152.543 -381.3242 151.9463 -381.3242 c
151.3604 -381.3242 150.8506 -381.5566 150.4229 -382.0234 c
149.9951 -382.4922 149.7803 -383.0703 149.7803 -383.7637 c
149.7803 -384.4668 149.9951 -385.0469 150.4229 -385.5039 c
150.8506 -385.9609 151.3604 -386.1895 151.9463 -386.1895 c
f
*U
*u
0 D
157.667 -379.375 m
157.667 -378.6992 157.8555 -378.1875 158.2373 -377.8359 c
158.6162 -377.4844 159.1963 -377.3086 159.9756 -377.3086 c
160.7705 -377.3086 L
160.7705 -378.623 L
160.2939 -378.623 L
159.9863 -378.623 159.748 -378.6875 159.5791 -378.8184 c
159.4111 -378.9473 159.3271 -379.1855 159.3271 -379.5332 c
159.3271 -380.1387 L
160.7705 -380.1387 L
160.7705 -381.4668 L
159.3271 -381.4668 L
159.3271 -387.375 L
157.667 -387.375 L
157.667 -381.4668 L
156.4238 -381.4668 L
156.4238 -380.1387 L
157.667 -380.1387 l
157.667 -379.375 L
f
*U
*u
78.8638 -405.0879 m
77.1733 -405.0879 L
77.1733 -395.0215 L
83.5571 -395.0215 L
83.5571 -396.4238 L
78.8638 -396.4238 L
78.8638 -399.3398 L
83.4272 -399.3398 L
83.4272 -400.7266 L
78.8638 -400.7266 l
78.8638 -405.0879 L
f
*U
*u
88.626 -405.2617 m
87.5684 -405.2617 86.665 -404.8984 85.9189 -404.1719 c
85.1729 -403.4453 84.7998 -402.5469 84.7998 -401.4785 c
84.7998 -400.4082 85.1729 -399.5098 85.9189 -398.7773 c
86.665 -398.0449 87.5684 -397.6797 88.626 -397.6797 c
89.6943 -397.6797 90.6001 -398.0449 91.3418 -398.7773 c
92.0835 -399.5098 92.4536 -400.4082 92.4536 -401.4785 c
92.4536 -402.5469 92.0835 -403.4453 91.3418 -404.1719 c
90.6001 -404.8984 89.6943 -405.2617 88.626 -405.2617 c
f
1 D
88.626 -403.9043 m
89.2231 -403.9043 89.7358 -403.6758 90.1646 -403.2168 c
90.5923 -402.7598 90.8071 -402.1797 90.8071 -401.4785 c
90.8071 -400.7852 90.5923 -400.2051 90.1646 -399.7383 c
89.7358 -399.2715 89.2231 -399.0371 88.626 -399.0371 c
88.0386 -399.0371 87.5313 -399.2715 87.1025 -399.7383 c
86.6738 -400.2051 86.4604 -400.7852 86.4604 -401.4785 c
86.4604 -402.1797 86.6738 -402.7598 87.1025 -403.2168 c
87.5313 -403.6758 88.0386 -403.9043 88.626 -403.9043 c
f
*U
*u
0 D
93.9839 -405.0879 m
93.9839 -397.8516 L
95.5298 -397.8516 L
95.5298 -398.9355 L
95.7695 -398.5801 96.0645 -398.3066 96.4106 -398.1133 c
96.8242 -397.8633 97.3105 -397.7363 97.8691 -397.7363 c
97.9844 -397.7363 L
97.9844 -399.2109 L
97.8115 -399.2109 L
97.1284 -399.2109 96.583 -399.418 96.1787 -399.832 c
95.8042 -400.2363 95.6162 -400.8672 95.6162 -401.7227 c
95.6162 -405.0879 l
93.9839 -405.0879 L
f
*U
*u
100.3247 -402.1992 m
100.4199 -402.6426 100.627 -403.0039 100.9453 -403.2832 c
101.4072 -403.707 102.019 -403.918 102.7788 -403.918 c
103.5786 -403.918 104.3252 -403.625 105.0181 -403.0371 c
105.5083 -404.25 L
104.7295 -404.9238 103.8047 -405.2617 102.7363 -405.2617 c
101.5132 -405.2617 100.519 -404.9141 99.7544 -404.2207 c
98.9883 -403.5293 98.606 -402.6191 98.606 -401.4922 c
98.606 -400.3848 98.9443 -399.4727 99.6245 -398.7559 c
100.3032 -398.0391 101.1914 -397.6797 102.2881 -397.6797 c
103.3657 -397.6797 104.2505 -398.0352 104.9385 -398.748 c
105.627 -399.4609 105.9707 -400.3418 105.9707 -401.3906 c
105.9707 -401.6797 105.9473 -401.9492 105.8984 -402.1992 c
100.3247 -402.1992 L
f
1 D
100.2949 -400.9004 m
104.3096 -400.9004 L
104.2905 -400.4277 104.0938 -399.998 103.7178 -399.6074 c
103.3428 -399.2168 102.8667 -399.0234 102.2881 -399.0234 c
101.6909 -399.0234 101.2002 -399.2344 100.8154 -399.6582 c
100.5361 -399.9766 100.3618 -400.3887 100.2949 -400.9004 c
f
*U
*u
0 D
109.3931 -395.8164 m
109.3931 -396.0957 109.29 -396.3398 109.083 -396.5449 c
108.8755 -396.752 108.6279 -396.8574 108.3398 -396.8574 c
108.0503 -396.8574 107.8027 -396.752 107.5957 -396.5449 c
107.3887 -396.3398 107.2852 -396.0957 107.2852 -395.8164 c
107.2852 -395.5273 107.3887 -395.2793 107.5957 -395.0723 c
107.8027 -394.8652 108.0503 -394.7617 108.3398 -394.7617 c
108.6279 -394.7617 108.8755 -394.8652 109.083 -395.0723 c
109.29 -395.2793 109.3931 -395.5273 109.3931 -395.8164 c
f
107.5313 -405.0879 m
107.5313 -397.8516 L
109.1768 -397.8516 L
109.1768 -405.0879 l
107.5313 -405.0879 L
f
*U
*u
114.2603 -407.9629 m
113.1523 -407.9629 112.2056 -407.6875 111.4155 -407.1387 c
111.9067 -405.8242 L
112.6377 -406.3633 113.4233 -406.6328 114.2603 -406.6328 c
114.9917 -406.6328 115.5669 -406.4258 115.9863 -406.0117 c
116.4048 -405.5977 116.6147 -405.1309 116.6147 -404.6113 c
116.6147 -404.1777 L
116.0176 -404.9004 115.2617 -405.2617 114.3481 -405.2617 c
113.2876 -405.2617 112.4302 -404.8867 111.7764 -404.1348 c
111.1206 -403.3848 110.7939 -402.498 110.7939 -401.4785 c
110.7939 -400.457 111.1206 -399.5703 111.7764 -398.8125 c
112.4302 -398.0566 113.2876 -397.6797 114.3481 -397.6797 c
115.2036 -397.6797 115.9404 -398.0254 116.5566 -398.7188 c
116.5566 -397.8516 L
118.2026 -397.8516 L
118.2026 -403.8613 L
118.2026 -405.2363 117.8613 -406.2656 117.1777 -406.9434 c
116.4937 -407.623 115.522 -407.9629 114.2603 -407.9629 c
f
1 D
116.543 -401.9531 m
116.5708 -401.627 116.5708 -401.3105 116.543 -401.002 c
116.4849 -400.4512 116.2827 -399.9941 115.9351 -399.6289 c
115.5498 -399.2246 115.0737 -399.0234 114.5059 -399.0234 c
113.8696 -399.0234 113.3706 -399.2578 113.0039 -399.7305 c
112.6377 -400.2031 112.4556 -400.7852 112.4556 -401.4785 c
112.4556 -402.1797 112.6377 -402.7637 113.0039 -403.2246 c
113.3706 -403.6875 113.8696 -403.918 114.5059 -403.918 c
115.0737 -403.918 115.5498 -403.7168 115.9351 -403.3125 c
116.2827 -402.9453 116.4849 -402.4941 116.543 -401.9531 c
f
*U
*u
0 D
121.8423 -401.4492 m
121.8423 -405.0879 L
120.2095 -405.0879 L
120.2095 -397.8516 L
121.7847 -397.8516 L
121.7847 -398.8203 L
121.9775 -398.4824 122.2559 -398.209 122.6226 -397.998 c
122.9883 -397.7852 123.3818 -397.6797 123.8057 -397.6797 c
124.6631 -397.6797 125.3496 -397.9707 125.8643 -398.5527 c
126.3799 -399.1367 126.6377 -399.9141 126.6377 -400.8848 c
126.6377 -405.0879 L
124.9912 -405.0879 L
124.9912 -401.3047 L
124.9912 -400.5352 124.8652 -399.9648 124.6143 -399.5938 c
124.3643 -399.2227 123.9795 -399.0371 123.46 -399.0371 c
123.1904 -399.0371 122.9277 -399.125 122.6733 -399.3047 c
122.418 -399.4824 122.2227 -399.7246 122.0884 -400.0332 c
121.9233 -400.3887 121.8423 -400.8613 121.8423 -401.4492 c
f
*U
*u
137.7422 -395.0215 m
141.2666 -405.0879 L
139.5479 -405.0879 L
138.5371 -402.127 L
134.667 -402.127 L
133.6553 -405.0879 L
131.9365 -405.0879 L
135.4463 -395.0215 l
137.7422 -395.0215 L
f
1 D
135.1436 -400.7266 m
138.0605 -400.7266 L
136.6162 -396.4961 l
135.1436 -400.7266 L
f
*U
*u
0 D
142.4229 -397.0879 m
142.4229 -396.4141 142.6123 -395.9004 142.9932 -395.5488 c
143.373 -395.1973 143.9541 -395.0215 144.7324 -395.0215 c
145.5273 -395.0215 L
145.5273 -396.3359 L
145.0498 -396.3359 L
144.7432 -396.3359 144.5049 -396.4023 144.3359 -396.5313 c
144.167 -396.6621 144.083 -396.9004 144.083 -397.2461 c
144.083 -397.8516 L
145.5273 -397.8516 L
145.5273 -399.1816 L
144.083 -399.1816 L
144.083 -405.0879 L
142.4229 -405.0879 L
142.4229 -399.1816 L
141.1807 -399.1816 L
141.1807 -397.8516 L
142.4229 -397.8516 l
142.4229 -397.0879 L
f
*U
*u
147.7803 -397.0879 m
147.7803 -396.4141 147.9707 -395.9004 148.3506 -395.5488 c
148.7305 -395.1973 149.3115 -395.0215 150.0908 -395.0215 c
150.8857 -395.0215 L
150.8857 -396.3359 L
150.4092 -396.3359 L
150.1006 -396.3359 149.8623 -396.4023 149.6934 -396.5313 c
149.5244 -396.6621 149.4414 -396.9004 149.4414 -397.2461 c
149.4414 -397.8516 L
150.8857 -397.8516 L
150.8857 -399.1816 L
149.4414 -399.1816 L
149.4414 -405.0879 L
147.7803 -405.0879 L
147.7803 -399.1816 L
146.5381 -399.1816 L
146.5381 -397.8516 L
147.7803 -397.8516 l
147.7803 -397.0879 L
f
*U
*u
155.2607 -400.4238 m
155.8096 -400.4238 156.3779 -400.4238 156.9658 -400.4238 c
156.9658 -399.9512 156.7822 -399.5977 156.417 -399.3613 c
156.0498 -399.125 155.5205 -399.0078 154.8281 -399.0078 c
154.7842 -399.0078 L
154.1299 -399.0078 153.4365 -399.1621 152.7061 -399.4707 c
152.2861 -398.1855 L
153.0459 -397.8574 153.8838 -397.6895 154.7988 -397.6797 c
154.8281 -397.6797 L
156.042 -397.6797 156.9717 -397.9121 157.6221 -398.3789 c
158.2725 -398.8477 158.5967 -399.5898 158.5967 -400.6113 c
158.5967 -405.0879 L
157.0381 -405.0879 L
157.0381 -404.2949 L
156.7285 -404.6016 156.3516 -404.8398 155.9033 -405.0078 c
155.4561 -405.1777 155.001 -405.2617 154.5381 -405.2617 c
153.6719 -405.2617 152.9717 -405.0332 152.4375 -404.5762 c
151.9033 -404.1191 151.6367 -403.5586 151.6367 -402.8926 c
151.6367 -402.1523 151.9688 -401.541 152.6338 -401.0586 c
153.249 -400.6348 154.125 -400.4238 155.2607 -400.4238 c
f
1 D
154.8135 -403.9629 m
155.2363 -403.9629 155.6563 -403.8574 156.0693 -403.6504 c
156.4854 -403.4453 156.7822 -403.207 156.9658 -402.9355 c
156.9658 -401.709 L
156.4268 -401.709 155.9395 -401.709 155.5068 -401.709 c
154.6787 -401.709 154.1006 -401.8145 153.7744 -402.0273 c
153.4561 -402.2676 153.2979 -402.5566 153.2979 -402.8926 c
153.2979 -403.2012 153.4307 -403.457 153.7021 -403.6582 c
153.9707 -403.8613 154.3428 -403.9629 154.8135 -403.9629 c
f
*U
*u
0 D
162.5254 -395.8164 m
162.5254 -396.0957 162.4229 -396.3398 162.2158 -396.5449 c
162.0078 -396.752 161.7607 -396.8574 161.4717 -396.8574 c
161.1826 -396.8574 160.9346 -396.752 160.7275 -396.5449 c
160.5205 -396.3398 160.416 -396.0957 160.416 -395.8164 c
160.416 -395.5273 160.5205 -395.2793 160.7275 -395.0723 c
160.9346 -394.8652 161.1826 -394.7617 161.4717 -394.7617 c
161.7607 -394.7617 162.0078 -394.8652 162.2158 -395.0723 c
162.4229 -395.2793 162.5254 -395.5273 162.5254 -395.8164 c
f
160.6621 -405.0879 m
160.6621 -397.8516 L
162.3096 -397.8516 L
162.3096 -405.0879 l
160.6621 -405.0879 L
f
*U
*u
164.4307 -405.0879 m
164.4307 -397.8516 L
165.9775 -397.8516 L
165.9775 -398.9355 L
166.2168 -398.5801 166.5127 -398.3066 166.8584 -398.1133 c
167.2715 -397.8633 167.7578 -397.7363 168.3174 -397.7363 c
168.4307 -397.7363 L
168.4307 -399.2109 L
168.2588 -399.2109 L
167.5752 -399.2109 167.0303 -399.418 166.626 -399.832 c
166.252 -400.2363 166.0635 -400.8672 166.0635 -401.7227 c
166.0635 -405.0879 l
164.4307 -405.0879 L
f
*U
*u
169.0381 -403.7441 m
170.0645 -402.6914 L
170.3525 -403.0859 170.6709 -403.3926 171.0166 -403.6152 c
171.3545 -403.8164 171.7139 -403.918 172.0996 -403.918 c
172.4658 -403.918 172.7773 -403.8438 173.0322 -403.6953 c
173.2861 -403.5449 173.4141 -403.3457 173.4141 -403.0957 c
173.4141 -402.8457 173.292 -402.6504 173.0459 -402.5098 c
172.8008 -402.3711 172.5088 -402.2383 172.1719 -402.1133 c
171.7783 -401.9883 171.374 -401.8477 170.96 -401.6953 c
170.4004 -401.4922 169.9912 -401.2324 169.7314 -400.9141 c
169.4717 -400.5977 169.3418 -400.2363 169.3418 -399.832 c
169.3418 -399.2344 169.6211 -398.7266 170.1807 -398.3086 c
170.7373 -397.8887 171.3965 -397.6797 172.1572 -397.6797 c
172.9658 -397.6797 173.626 -397.873 174.1367 -398.2578 c
174.3965 -398.459 174.6025 -398.7109 174.7568 -399.0078 c
173.7461 -399.9902 L
173.6113 -399.7598 173.4521 -399.5723 173.2705 -399.4277 c
172.9521 -399.1484 172.5537 -399.0078 172.0713 -399.0078 c
171.792 -399.0078 171.5479 -399.0781 171.3408 -399.2168 c
171.1357 -399.3574 171.0303 -399.5234 171.0303 -399.7148 c
171.0303 -399.9277 171.1475 -400.1055 171.3789 -400.25 c
171.6094 -400.3945 171.9502 -400.5352 172.4033 -400.6699 c
172.5674 -400.7168 172.7549 -400.7754 172.9658 -400.8418 c
173.6689 -401.0742 174.2012 -401.3711 174.5625 -401.7383 c
174.9229 -402.1055 175.1035 -402.541 175.1035 -403.0508 c
175.1035 -403.6484 174.8154 -404.166 174.2373 -404.6035 c
173.6602 -405.043 172.9229 -405.2617 172.0283 -405.2617 c
171.2764 -405.2617 170.6123 -405.0879 170.0342 -404.7422 c
169.6494 -404.5098 169.3174 -404.1777 169.0381 -403.7441 c
f
*U
U
u
u
u
u
u
1 0.7 0.2 0.4 (GOK_Blue) 0 x
142.6631 -327.9922 m
136.9834 -324.1309 129.71 -325.707 125.8936 -331.5098 c
122.7036 -336.3594 117.8916 -336.9609 116.0259 -336.9609 c
109.9521 -336.9609 105.7939 -332.6895 104.562 -328.2676 C
104.5596 -328.2676 L
104.5479 -328.2227 104.5386 -328.1855 104.5264 -328.1426 c
104.5151 -328.0938 104.499 -328.0449 104.4893 -327.9922 c
104.0049 -326.1484 103.8853 -325.2656 103.8853 -323.3047 c
103.8853 -312.7305 114.7314 -300.959 130.3584 -300.959 c
146.3604 -300.959 155.5156 -313.1387 157.874 -319.9102 c
157.833 -319.791 157.7959 -319.6719 157.7539 -319.5488 c
153.2139 -306.3086 140.6563 -296.7891 125.875 -296.7891 c
107.27 -296.7891 92.1826 -311.873 92.1826 -330.4824 c
92.1826 -347.1152 104.1797 -361.3535 120.8203 -361.3535 c
134.0928 -361.3535 143.0107 -353.9102 147.1025 -343.6563 c
149.3486 -338.0469 147.7588 -331.4551 142.6631 -327.9922 c
f
U
u
0 1 0.8 0 (GOK_Red) 0 x
158.083 -320.5664 m
156.1162 -313.9629 146.8906 -300.959 130.3584 -300.959 c
114.7314 -300.959 103.8853 -312.7305 103.8853 -323.3047 c
103.8853 -325.2656 104.0049 -326.1484 104.4893 -327.9922 c
104.2842 -327.1875 104.1768 -326.377 104.1768 -325.5898 c
104.1768 -314.5762 115.2036 -306.9473 126.5381 -306.9473 c
141.8818 -306.9473 154.3193 -319.3848 154.3193 -334.7246 c
154.3193 -346.7539 147.3994 -357.1621 137.3428 -362.1641 C
137.3447 -362.1719 L
150.3096 -357.4766 159.5654 -345.0625 159.5654 -330.4824 c
159.5654 -327.0313 159.1016 -323.9883 158.083 -320.5664 c
f
U
U
U
U
U
U
u
u
u
u
u
u
u
u
u
1 0.7 0.2 0.4 (GOK_Blue) 0 x
139.8462 -480.0039 m
134.1675 -476.1445 126.8921 -477.7188 123.0776 -483.5234 c
119.8872 -488.3711 115.0747 -488.9746 113.2095 -488.9746 c
107.1362 -488.9746 102.9771 -484.7012 101.7476 -480.2793 C
101.7446 -480.2793 L
101.731 -480.2344 101.7222 -480.1992 101.7104 -480.1563 c
101.6987 -480.1074 101.6821 -480.0566 101.6704 -480.0059 c
101.186 -478.1621 101.0679 -477.2773 101.0679 -475.3184 c
101.0679 -464.7441 111.9146 -452.9707 127.5425 -452.9707 c
143.5444 -452.9707 152.6987 -465.1523 155.0591 -471.9219 c
155.0151 -471.8027 154.98 -471.6855 154.938 -471.5605 c
150.3989 -458.3223 137.8403 -448.8008 123.0591 -448.8008 c
104.4556 -448.8008 89.3667 -463.8828 89.3667 -482.4941 c
89.3667 -499.127 101.3657 -513.3652 118.0044 -513.3652 c
131.2769 -513.3652 140.1968 -505.9219 144.2876 -495.668 c
146.5327 -490.0605 144.9429 -483.4668 139.8462 -480.0039 c
f
U
u
0 1 0.8 0 (GOK_Red) 0 x
155.2661 -472.5781 m
153.2993 -465.9766 144.0737 -452.9707 127.5425 -452.9707 c
111.9146 -452.9707 101.0679 -464.7441 101.0679 -475.3184 c
101.0679 -477.2773 101.186 -478.1621 101.6704 -480.0059 c
101.4683 -479.1992 101.3599 -478.3887 101.3599 -477.6016 c
101.3599 -466.5879 112.3872 -458.959 123.7222 -458.959 c
139.0679 -458.959 151.5024 -471.3984 151.5024 -486.7383 c
151.5024 -498.7656 144.5835 -509.1738 134.5269 -514.1777 C
134.5288 -514.1855 L
147.4917 -509.4902 156.7485 -497.0742 156.7485 -482.4941 c
156.7485 -479.043 156.2866 -476 155.2661 -472.5781 c
f
U
U
U
U
U
U
U
U
u
*u
0 0 0 0.8 k
187.0112 -463.957 m
187.0112 -477.3867 L
184.8511 -477.3867 L
184.8511 -466.5781 L
181.3433 -477.3867 L
179.2642 -477.3867 L
175.7563 -466.5781 L
175.7563 -477.3867 L
173.5991 -477.3867 L
173.5991 -463.957 L
176.9126 -463.957 L
180.3032 -474.4199 L
183.6948 -463.957 l
187.0112 -463.957 L
f
*U
*u
192.3286 -465.0156 m
192.3286 -465.3887 192.1909 -465.7129 191.9146 -465.9902 c
191.6372 -466.2656 191.3081 -466.4043 190.9224 -466.4043 c
190.5376 -466.4043 190.2065 -466.2656 189.9302 -465.9902 c
189.6528 -465.7129 189.5151 -465.3887 189.5151 -465.0156 c
189.5151 -464.6309 189.6528 -464.3008 189.9302 -464.0234 c
190.2065 -463.748 190.5376 -463.6094 190.9224 -463.6094 c
191.3081 -463.6094 191.6372 -463.748 191.9146 -464.0234 c
192.1909 -464.3008 192.3286 -464.6309 192.3286 -465.0156 c
f
189.8433 -477.3867 m
189.8433 -467.7344 L
192.0396 -467.7344 L
192.0396 -477.3867 l
189.8433 -477.3867 L
f
*U
*u
197.0493 -472.5313 m
197.0493 -477.3867 L
194.8716 -477.3867 L
194.8716 -467.7344 L
196.9722 -467.7344 L
196.9722 -469.0234 L
197.229 -468.5742 197.603 -468.209 198.0894 -467.9258 c
198.5776 -467.6445 199.105 -467.502 199.6714 -467.502 c
200.814 -467.502 201.729 -467.8906 202.4155 -468.668 c
203.104 -469.4453 203.4478 -470.4824 203.4478 -471.7793 c
203.4478 -477.3867 L
201.2515 -477.3867 L
201.2515 -472.3398 L
201.2515 -471.3125 201.0845 -470.5508 200.7495 -470.0547 c
200.4146 -469.5605 199.9009 -469.3125 199.2065 -469.3125 c
198.8491 -469.3125 198.4976 -469.4316 198.1577 -469.6699 c
197.8169 -469.9082 197.5571 -470.2324 197.3774 -470.6426 c
197.1587 -471.1191 197.0493 -471.748 197.0493 -472.5313 c
f
*U
*u
208.6895 -465.0156 m
208.6895 -465.3887 208.5527 -465.7129 208.2754 -465.9902 c
207.998 -466.2656 207.668 -466.4043 207.2813 -466.4043 c
206.8965 -466.4043 206.5664 -466.2656 206.291 -465.9902 c
206.0137 -465.7129 205.875 -465.3887 205.875 -465.0156 c
205.875 -464.6309 206.0137 -464.3008 206.291 -464.0234 c
206.5664 -463.748 206.8965 -463.6094 207.2813 -463.6094 c
207.668 -463.6094 207.998 -463.748 208.2754 -464.0234 c
208.5527 -464.3008 208.6895 -464.6309 208.6895 -465.0156 c
f
206.2031 -477.3867 m
206.2031 -467.7344 L
208.4004 -467.7344 L
208.4004 -477.3867 l
206.2031 -477.3867 L
f
*U
*u
210.3477 -475.5957 m
211.7148 -474.1895 L
212.0996 -474.7168 212.5234 -475.127 212.9863 -475.4219 c
213.4355 -475.6914 213.918 -475.8262 214.4316 -475.8262 c
214.9199 -475.8262 215.334 -475.7285 215.6738 -475.5293 c
216.0156 -475.3301 216.1855 -475.0625 216.1855 -474.7285 c
216.1855 -474.3945 216.0215 -474.1348 215.6934 -473.9473 c
215.3672 -473.7617 214.9785 -473.5859 214.5273 -473.418 c
214 -473.252 213.4609 -473.0645 212.9102 -472.8594 c
212.1641 -472.5898 211.6172 -472.2422 211.2715 -471.8184 c
210.9238 -471.3945 210.75 -470.9121 210.75 -470.373 c
210.75 -469.5781 211.123 -468.8984 211.8691 -468.3398 c
212.6133 -467.7813 213.4941 -467.502 214.5098 -467.502 c
215.5879 -467.502 216.4668 -467.7598 217.1484 -468.2734 c
217.4961 -468.543 217.7715 -468.877 217.9766 -469.2754 c
216.6289 -470.5859 L
216.4492 -470.2773 216.2363 -470.0273 215.9922 -469.834 c
215.5684 -469.4609 215.0352 -469.2754 214.3945 -469.2754 c
214.0195 -469.2754 213.6973 -469.3691 213.4199 -469.5547 c
213.1426 -469.7402 213.0039 -469.9629 213.0039 -470.2188 c
213.0039 -470.502 213.1582 -470.7402 213.4688 -470.9316 c
213.7773 -471.125 214.2305 -471.3125 214.8359 -471.4902 c
215.0547 -471.5547 215.3047 -471.6328 215.5879 -471.7227 c
216.5254 -472.0313 217.2344 -472.4297 217.7188 -472.918 c
218.1992 -473.4063 218.4414 -473.9902 218.4414 -474.6699 c
218.4414 -475.4668 218.0547 -476.1582 217.2832 -476.7422 c
216.5137 -477.3262 215.5293 -477.6191 214.334 -477.6191 c
213.334 -477.6191 212.4473 -477.3867 211.6777 -476.9258 c
211.1602 -476.6172 210.7168 -476.1738 210.3477 -475.5957 c
f
*U
*u
223.1426 -464.6309 m
223.1426 -467.7344 L
225.2422 -467.7344 L
225.2422 -469.5059 L
223.1426 -469.5059 L
223.1426 -474.4199 L
223.1426 -474.8828 223.2539 -475.2012 223.4785 -475.373 c
223.7031 -475.5469 224.0215 -475.6348 224.4336 -475.6348 c
225.2422 -475.6348 L
225.2422 -477.3867 L
223.9121 -477.3867 L
222.873 -477.3867 222.1133 -477.1563 221.6387 -476.6934 c
221.1621 -476.2305 220.9258 -475.5449 220.9258 -474.6328 c
220.9258 -469.5059 L
219.2695 -469.5059 L
219.2695 -467.7344 L
220.9258 -467.7344 L
220.9258 -464.6309 l
223.1426 -464.6309 L
f
*U
*u
227.2266 -477.3867 m
227.2266 -467.7344 L
229.2891 -467.7344 L
229.2891 -469.1797 L
229.6113 -468.7031 230.002 -468.3379 230.4648 -468.0801 c
231.0156 -467.7461 231.666 -467.5781 232.4102 -467.5781 c
232.5645 -467.5781 L
232.5645 -469.5449 L
232.334 -469.5449 L
231.4219 -469.5449 230.6953 -469.8203 230.1563 -470.373 c
229.6563 -470.9121 229.4043 -471.7539 229.4043 -472.8984 c
229.4043 -477.3867 l
227.2266 -477.3867 L
f
*U
*u
237.3438 -477.0215 m
233.5469 -467.7344 L
235.8223 -467.7344 L
238.4434 -474.3242 L
241.0449 -467.7344 L
243.2988 -467.7344 L
237.9219 -481.127 L
235.6855 -481.127 l
237.3438 -477.0215 L
f
*U
*u
254.3008 -477.6191 m
252.8887 -477.6191 251.6855 -477.1348 250.6875 -476.1641 c
249.6934 -475.1934 249.1973 -473.9961 249.1973 -472.5703 c
249.1973 -471.1445 249.6934 -469.9434 250.6875 -468.9668 c
251.6855 -467.9902 252.8887 -467.502 254.3008 -467.502 c
255.7285 -467.502 256.9355 -467.9902 257.9238 -468.9668 c
258.9141 -469.9434 259.4102 -471.1445 259.4102 -472.5703 c
259.4102 -473.9961 258.9141 -475.1934 257.9238 -476.1641 c
256.9355 -477.1348 255.7285 -477.6191 254.3008 -477.6191 c
f
1 D
254.3008 -475.8086 m
255.0977 -475.8086 255.7832 -475.502 256.3555 -474.8926 c
256.9277 -474.2832 257.2129 -473.5078 257.2129 -472.5703 c
257.2129 -471.6445 256.9277 -470.8711 256.3555 -470.248 c
255.7832 -469.625 255.0977 -469.3125 254.3008 -469.3125 c
253.5176 -469.3125 252.8398 -469.625 252.2676 -470.248 c
251.6973 -470.8711 251.4102 -471.6445 251.4102 -472.5703 c
251.4102 -473.5078 251.6973 -474.2832 252.2676 -474.8926 c
252.8398 -475.502 253.5176 -475.8086 254.3008 -475.8086 c
f
*U
*u
0 D
261.9336 -466.7129 m
261.9336 -465.8125 262.1855 -465.1289 262.6934 -464.6602 c
263.2012 -464.1914 263.9746 -463.957 265.0156 -463.957 c
266.0742 -463.957 L
266.0742 -465.7109 L
265.4395 -465.7109 L
265.0273 -465.7109 264.709 -465.7969 264.4863 -465.9707 c
264.2617 -466.1426 264.1484 -466.4609 264.1484 -466.9238 c
264.1484 -467.7344 L
266.0742 -467.7344 L
266.0742 -469.5059 L
264.1484 -469.5059 L
264.1484 -477.3867 L
261.9336 -477.3867 L
261.9336 -469.5059 L
260.2754 -469.5059 L
260.2754 -467.7344 L
261.9336 -467.7344 l
261.9336 -466.7129 L
f
*U
*u
175.8521 -501 m
173.5991 -501 L
173.5991 -487.5703 L
182.1147 -487.5703 L
182.1147 -489.4395 L
175.8521 -489.4395 L
175.8521 -493.332 L
181.9409 -493.332 L
181.9409 -495.1816 L
175.8521 -495.1816 l
175.8521 -501 L
f
*U
*u
188.8784 -501.2324 m
187.4653 -501.2324 186.2612 -500.748 185.2661 -499.7773 c
184.271 -498.8066 183.7729 -497.6094 183.7729 -496.1836 c
183.7729 -494.7578 184.271 -493.5566 185.2661 -492.5801 c
186.2612 -491.6035 187.4653 -491.1152 188.8784 -491.1152 c
190.3062 -491.1152 191.5112 -491.6035 192.5024 -492.5801 c
193.4917 -493.5566 193.9858 -494.7578 193.9858 -496.1836 c
193.9858 -497.6094 193.4917 -498.8066 192.5024 -499.7773 c
191.5112 -500.748 190.3062 -501.2324 188.8784 -501.2324 c
f
1 D
188.8784 -499.4199 m
189.6753 -499.4199 190.3599 -499.1152 190.9312 -498.5059 c
191.5034 -497.8965 191.7896 -497.1211 191.7896 -496.1836 c
191.7896 -495.2578 191.5034 -494.4844 190.9312 -493.8613 c
190.3599 -493.2383 189.6753 -492.9258 188.8784 -492.9258 c
188.0942 -492.9258 187.4165 -493.2383 186.8452 -493.8613 c
186.2729 -494.4844 185.9878 -495.2578 185.9878 -496.1836 c
185.9878 -497.1211 186.2729 -497.8965 186.8452 -498.5059 c
187.4165 -499.1152 188.0942 -499.4199 188.8784 -499.4199 c
f
*U
*u
0 D
196.0278 -501 m
196.0278 -491.3457 L
198.0894 -491.3457 L
198.0894 -492.791 L
198.4116 -492.3164 198.8042 -491.9512 199.2651 -491.6934 c
199.8188 -491.3594 200.4663 -491.1914 201.2124 -491.1914 c
201.3667 -491.1914 L
201.3667 -493.1582 L
201.1343 -493.1582 L
200.2212 -493.1582 199.4976 -493.4336 198.9585 -493.9863 c
198.4565 -494.5254 198.2065 -495.3672 198.2065 -496.5117 c
198.2065 -501 l
196.0278 -501 L
f
*U
*u
204.4868 -497.1465 m
204.6177 -497.7383 204.8911 -498.2188 205.3184 -498.5918 c
205.9336 -499.1582 206.748 -499.4395 207.7637 -499.4395 c
208.8301 -499.4395 209.8262 -499.0488 210.75 -498.2656 c
211.4043 -499.8828 L
210.3652 -500.7832 209.1328 -501.2324 207.707 -501.2324 c
206.0742 -501.2324 204.7485 -500.7695 203.7271 -499.8438 c
202.7056 -498.9199 202.1938 -497.7051 202.1938 -496.2031 c
202.1938 -494.7266 202.6489 -493.5078 203.5522 -492.5508 c
204.4604 -491.5938 205.6445 -491.1152 207.1094 -491.1152 c
208.5469 -491.1152 209.7266 -491.5898 210.6445 -492.541 c
211.5625 -493.4922 212.0234 -494.668 212.0234 -496.0684 c
212.0234 -496.4531 211.9902 -496.8125 211.9258 -497.1465 c
204.4868 -497.1465 L
f
1 D
204.4487 -495.4121 m
209.8066 -495.4121 L
209.7813 -494.7832 209.5176 -494.209 209.0156 -493.6875 c
208.5156 -493.168 207.8789 -492.9082 207.1094 -492.9082 c
206.3125 -492.9082 205.6563 -493.1895 205.1426 -493.7559 c
204.769 -494.1797 204.5386 -494.7324 204.4487 -495.4121 c
f
*U
*u
0 D
216.5898 -488.6289 m
216.5898 -489.002 216.4512 -489.3262 216.1738 -489.6035 c
215.9004 -489.8789 215.5684 -490.0176 215.1836 -490.0176 c
214.7988 -490.0176 214.4668 -489.8789 214.1914 -489.6035 c
213.9141 -489.3262 213.7773 -489.002 213.7773 -488.6289 c
213.7773 -488.2441 213.9141 -487.9141 214.1914 -487.6367 c
214.4668 -487.3613 214.7988 -487.2227 215.1836 -487.2227 c
215.5684 -487.2227 215.9004 -487.3613 216.1738 -487.6367 c
216.4512 -487.9141 216.5898 -488.2441 216.5898 -488.6289 c
f
214.1035 -501 m
214.1035 -491.3457 L
216.3008 -491.3457 L
216.3008 -501 l
214.1035 -501 L
f
*U
*u
223.084 -504.8359 m
221.6074 -504.8359 220.3418 -504.4688 219.2871 -503.7383 c
219.9434 -501.9844 L
220.9199 -502.7031 221.9668 -503.0625 223.084 -503.0625 c
224.0586 -503.0625 224.8301 -502.7871 225.3887 -502.2344 c
225.9453 -501.6816 226.2266 -501.0586 226.2266 -500.3652 c
226.2266 -499.7871 L
225.4277 -500.75 224.4219 -501.2324 223.1992 -501.2324 c
221.7871 -501.2324 220.6426 -500.7305 219.7695 -499.7285 c
218.8965 -498.7266 218.459 -497.5449 218.459 -496.1836 c
218.459 -494.8223 218.8965 -493.6367 219.7695 -492.6289 c
220.6426 -491.6191 221.7871 -491.1152 223.1992 -491.1152 c
224.3438 -491.1152 225.3262 -491.5781 226.1484 -492.502 c
226.1484 -491.3457 L
228.3438 -491.3457 L
228.3438 -499.3633 L
228.3438 -501.2012 227.8887 -502.5723 226.9766 -503.4766 c
226.0645 -504.3828 224.7676 -504.8359 223.084 -504.8359 c
f
1 D
226.1289 -496.8203 m
226.168 -496.3828 226.168 -495.959 226.1289 -495.5469 c
226.0508 -494.8145 225.7813 -494.2051 225.3184 -493.7168 c
224.8066 -493.1777 224.1699 -492.9082 223.4121 -492.9082 c
222.5645 -492.9082 221.8945 -493.2227 221.4063 -493.8516 c
220.9199 -494.4805 220.6758 -495.2578 220.6758 -496.1836 c
220.6758 -497.1211 220.9199 -497.8984 221.4063 -498.5156 c
221.8945 -499.1328 222.5645 -499.4395 223.4121 -499.4395 c
224.1699 -499.4395 224.8066 -499.1699 225.3184 -498.6309 c
225.7813 -498.1426 226.0508 -497.5391 226.1289 -496.8203 c
f
*U
*u
0 D
233.2012 -496.1445 m
233.2012 -501 L
231.0234 -501 L
231.0234 -491.3457 L
233.123 -491.3457 L
233.123 -492.6367 L
233.3809 -492.1875 233.752 -491.8223 234.2402 -491.5391 c
234.7285 -491.2578 235.2539 -491.1152 235.8223 -491.1152 c
236.9648 -491.1152 237.8809 -491.5039 238.5684 -492.2813 c
239.2539 -493.0586 239.5977 -494.0957 239.5977 -495.3926 c
239.5977 -501 L
237.4004 -501 L
237.4004 -495.9531 L
237.4004 -494.9238 237.2344 -494.1641 236.9004 -493.668 c
236.5664 -493.1738 236.0527 -492.9258 235.3594 -492.9258 c
235 -492.9258 234.6484 -493.0449 234.3105 -493.2832 c
233.9668 -493.5215 233.709 -493.8457 233.5273 -494.2559 c
233.3105 -494.7324 233.2012 -495.3613 233.2012 -496.1445 c
f
*U
*u
254.416 -487.5703 m
259.1191 -501 L
256.8242 -501 L
255.4766 -497.0508 L
250.3105 -497.0508 L
248.9629 -501 L
246.6719 -501 L
251.3535 -487.5703 l
254.416 -487.5703 L
f
1 D
250.9473 -495.1816 m
254.8418 -495.1816 L
252.9141 -489.5352 l
250.9473 -495.1816 L
f
*U
*u
0 D
260.6602 -490.3262 m
260.6602 -489.4258 260.9141 -488.7422 261.4219 -488.2734 c
261.9297 -487.8047 262.7031 -487.5703 263.7441 -487.5703 c
264.8027 -487.5703 L
264.8027 -489.3223 L
264.168 -489.3223 L
263.7578 -489.3223 263.4375 -489.4102 263.2148 -489.584 c
262.9883 -489.7559 262.8789 -490.0742 262.8789 -490.5371 c
262.8789 -491.3457 L
264.8027 -491.3457 L
264.8027 -493.1191 L
262.8789 -493.1191 L
262.8789 -501 L
260.6602 -501 L
260.6602 -493.1191 L
259.0039 -493.1191 L
259.0039 -491.3457 L
260.6602 -491.3457 l
260.6602 -490.3262 L
f
*U
*u
267.8105 -490.3262 m
267.8105 -489.4258 268.0645 -488.7422 268.5723 -488.2734 c
269.0781 -487.8047 269.8535 -487.5703 270.8926 -487.5703 c
271.9531 -487.5703 L
271.9531 -489.3223 L
271.3164 -489.3223 L
270.9043 -489.3223 270.5879 -489.4102 270.3633 -489.584 c
270.1387 -489.7559 270.0273 -490.0742 270.0273 -490.5371 c
270.0273 -491.3457 L
271.9531 -491.3457 L
271.9531 -493.1191 L
270.0273 -493.1191 L
270.0273 -501 L
267.8105 -501 L
267.8105 -493.1191 L
266.1543 -493.1191 L
266.1543 -491.3457 L
267.8105 -491.3457 l
267.8105 -490.3262 L
f
*U
*u
277.791 -494.7773 m
278.5234 -494.7773 279.2832 -494.7773 280.0645 -494.7773 c
280.0645 -494.1484 279.8223 -493.6758 279.334 -493.3613 c
278.8457 -493.0449 278.1387 -492.8887 277.2129 -492.8887 c
277.1543 -492.8887 L
276.2813 -492.8887 275.3555 -493.0938 274.3789 -493.5039 c
273.8223 -491.7891 L
274.8359 -491.3535 275.9551 -491.1289 277.1738 -491.1152 c
277.2129 -491.1152 L
278.8301 -491.1152 280.0762 -491.4277 280.9414 -492.0508 c
281.8086 -492.6738 282.2422 -493.666 282.2422 -495.0273 c
282.2422 -501 L
280.1602 -501 L
280.1602 -499.9414 L
279.75 -500.3516 279.2461 -500.6699 278.6484 -500.8945 c
278.0527 -501.1191 277.4453 -501.2324 276.8281 -501.2324 c
275.6719 -501.2324 274.7363 -500.9258 274.0234 -500.3164 c
273.3105 -499.707 272.9551 -498.959 272.9551 -498.0723 c
272.9551 -497.082 273.3984 -496.2676 274.2832 -495.625 c
275.1055 -495.0586 276.2754 -494.7773 277.791 -494.7773 c
f
1 D
277.1934 -499.498 m
277.7598 -499.498 278.3164 -499.3594 278.8711 -499.084 c
279.4238 -498.8066 279.8223 -498.4902 280.0645 -498.1289 c
280.0645 -496.4922 L
279.3457 -496.4922 278.6973 -496.4922 278.1191 -496.4922 c
277.0137 -496.4922 276.2422 -496.6328 275.8066 -496.916 c
275.3828 -497.2363 275.1699 -497.623 275.1699 -498.0723 c
275.1699 -498.4844 275.3496 -498.8242 275.709 -499.0938 c
276.0684 -499.3633 276.5645 -499.498 277.1934 -499.498 c
f
*U
*u
0 D
287.4824 -488.6289 m
287.4824 -489.002 287.3457 -489.3262 287.0703 -489.6035 c
286.793 -489.8789 286.4629 -490.0176 286.0781 -490.0176 c
285.6914 -490.0176 285.3613 -489.8789 285.084 -489.6035 c
284.8086 -489.3262 284.6699 -489.002 284.6699 -488.6289 c
284.6699 -488.2441 284.8086 -487.9141 285.084 -487.6367 c
285.3613 -487.3613 285.6914 -487.2227 286.0781 -487.2227 c
286.4629 -487.2227 286.793 -487.3613 287.0703 -487.6367 c
287.3457 -487.9141 287.4824 -488.2441 287.4824 -488.6289 c
f
285 -501 m
285 -491.3457 L
287.1953 -491.3457 L
287.1953 -501 l
285 -501 L
f
*U
*u
290.0293 -501 m
290.0293 -491.3457 L
292.0918 -491.3457 L
292.0918 -492.791 L
292.4121 -492.3164 292.8047 -491.9512 293.2676 -491.6934 c
293.8184 -491.3594 294.4688 -491.1914 295.2129 -491.1914 c
295.3672 -491.1914 L
295.3672 -493.1582 L
295.1367 -493.1582 L
294.2227 -493.1582 293.498 -493.4336 292.957 -493.9863 c
292.4551 -494.5254 292.207 -495.3672 292.207 -496.5117 c
292.207 -501 l
290.0293 -501 L
f
*U
*u
296.1738 -499.209 m
297.543 -497.8027 L
297.9277 -498.3281 298.3535 -498.7402 298.8145 -499.0352 c
299.2637 -499.3047 299.7461 -499.4395 300.2598 -499.4395 c
300.748 -499.4395 301.1621 -499.3418 301.5039 -499.1406 c
301.8438 -498.9434 302.0137 -498.6758 302.0137 -498.3418 c
302.0137 -498.0078 301.8516 -497.748 301.5234 -497.5605 c
301.1953 -497.375 300.8066 -497.1992 300.3574 -497.0313 c
299.8301 -496.8652 299.291 -496.6777 298.7383 -496.4727 c
297.9922 -496.2031 297.4473 -495.8555 297.1016 -495.4316 c
296.752 -495.0078 296.5801 -494.5254 296.5801 -493.9863 c
296.5801 -493.1895 296.9531 -492.5117 297.6973 -491.9531 c
298.4414 -491.3945 299.3223 -491.1152 300.3359 -491.1152 c
301.416 -491.1152 302.2969 -491.373 302.9785 -491.8867 c
303.3242 -492.1563 303.6016 -492.4902 303.8047 -492.8887 c
302.457 -494.1992 L
302.2773 -493.8906 302.0645 -493.6406 301.8223 -493.4473 c
301.3984 -493.0742 300.8652 -492.8887 300.2207 -492.8887 c
299.8496 -492.8887 299.5254 -492.9824 299.248 -493.168 c
298.9727 -493.3535 298.834 -493.5762 298.834 -493.832 c
298.834 -494.1152 298.9902 -494.3535 299.2969 -494.5449 c
299.6055 -494.7383 300.0625 -494.9238 300.666 -495.1035 c
300.8828 -495.168 301.1348 -495.2461 301.416 -495.3359 c
302.3555 -495.6445 303.0645 -496.043 303.5449 -496.5313 c
304.0273 -497.0195 304.2695 -497.6035 304.2695 -498.2832 c
304.2695 -499.0801 303.8848 -499.7695 303.1113 -500.3555 c
302.3418 -500.9395 301.3594 -501.2324 300.1641 -501.2324 c
299.1621 -501.2324 298.2773 -501 297.5039 -500.5391 c
296.9922 -500.2305 296.5469 -499.7871 296.1738 -499.209 c
f
*U
U
U
u
u
u
u
u
1 0.7 0.2 0.4 (GOK_Blue) 0 x
294.1816 -327.123 m
288.4492 -323.2275 281.1074 -324.8164 277.2578 -330.6758 c
274.0391 -335.5693 269.1807 -336.1777 267.2988 -336.1777 c
261.168 -336.1777 256.9736 -331.8643 255.7285 -327.4014 C
255.7266 -327.4014 L
255.7139 -327.3584 255.7031 -327.3203 255.6924 -327.2773 c
255.6807 -327.2285 255.665 -327.1787 255.6533 -327.125 c
255.1631 -325.2646 255.042 -324.373 255.042 -322.3945 c
255.042 -311.7217 265.9922 -299.8408 281.7637 -299.8408 c
297.9131 -299.8408 307.1533 -312.1338 309.5332 -318.9668 c
309.4922 -318.8477 309.4531 -318.7275 309.4121 -318.6045 c
304.8291 -305.2412 292.1572 -295.6328 277.2393 -295.6328 c
258.4619 -295.6328 243.2344 -310.8555 243.2344 -329.6357 c
243.2344 -346.4238 255.3447 -360.7939 272.1377 -360.7939 c
285.5313 -360.7939 294.5332 -353.2832 298.6631 -342.9336 c
300.9307 -337.2725 299.3242 -330.6191 294.1816 -327.123 c
f
U
u
0 1 0.8 0 (GOK_Red) 0 x
309.7441 -319.6299 m
307.7598 -312.9658 298.4502 -299.8408 281.7637 -299.8408 c
265.9922 -299.8408 255.042 -311.7217 255.042 -322.3945 c
255.042 -324.373 255.1631 -325.2646 255.6533 -327.125 c
255.4473 -326.3115 255.3408 -325.4951 255.3408 -324.6992 c
255.3408 -313.5859 266.4688 -305.8848 277.9082 -305.8848 c
293.3945 -305.8848 305.9473 -318.4385 305.9473 -333.9209 c
305.9473 -346.0605 298.9619 -356.5645 288.8115 -361.6133 C
288.8145 -361.6211 L
301.8975 -356.8828 311.2412 -344.3525 311.2412 -329.6357 c
311.2412 -326.1533 310.7734 -323.084 309.7441 -319.6299 c
f
U
U
U
U
u
*u
0 0 0 0.8 k
256.7256 -396.1055 m
256.7256 -398.5117 L
241.9209 -398.5117 L
241.9209 -396.1055 L
247.8223 -396.1055 L
247.8223 -391.3945 L
247.4404 -391.3125 247.0781 -391.1963 246.7295 -391.0479 c
245.9365 -390.7178 245.2598 -390.2871 244.6973 -389.7578 c
244.1182 -389.1963 243.6611 -388.5518 243.3213 -387.8232 c
242.9814 -387.0967 242.8125 -386.3115 242.8125 -385.4678 c
242.8125 -384.6416 242.9814 -383.8643 243.3213 -383.1357 c
243.6611 -382.4102 244.1182 -381.7656 244.6973 -381.2021 c
245.2598 -380.6738 245.9287 -380.248 246.7061 -379.9248 c
247.4834 -379.6025 248.3008 -379.4414 249.1602 -379.4414 c
250.0205 -379.4414 250.832 -379.6025 251.5928 -379.9248 c
252.3516 -380.248 253.0215 -380.6738 253.5996 -381.2021 c
254.1787 -381.7656 254.6377 -382.4102 254.9766 -383.1357 c
255.3164 -383.8643 255.4854 -384.6416 255.4854 -385.4678 c
255.4854 -386.3115 255.3164 -387.0967 254.9766 -387.8232 c
254.6377 -388.5518 254.1787 -389.1963 253.5996 -389.7578 c
253.0215 -390.2871 252.3516 -390.7178 251.5928 -391.0479 c
251.2285 -391.1963 250.8398 -391.3125 250.4258 -391.3945 c
250.4258 -396.1055 l
256.7256 -396.1055 L
f
1 D
252.7822 -385.4678 m
252.7822 -384.9883 252.6875 -384.5293 252.4971 -384.0908 c
252.3057 -383.6533 252.0469 -383.2607 251.7158 -382.9131 c
251.3848 -382.5996 251.002 -382.3438 250.5625 -382.1445 c
250.124 -381.9463 249.6563 -381.8467 249.1602 -381.8467 c
248.665 -381.8467 248.1992 -381.9463 247.7598 -382.1445 c
247.3213 -382.3438 246.9287 -382.5996 246.5811 -382.9131 c
246.2686 -383.2607 246.0127 -383.6533 245.8125 -384.0908 c
245.6162 -384.5293 245.5156 -384.9883 245.5156 -385.4678 c
245.5156 -385.9639 245.6162 -386.4307 245.8125 -386.8691 c
246.0127 -387.3066 246.2686 -387.6992 246.5811 -388.0459 c
246.9287 -388.3613 247.3213 -388.6172 247.7598 -388.8154 c
248.1992 -389.0137 248.665 -389.1133 249.1602 -389.1133 c
249.6563 -389.1133 250.124 -389.0137 250.5625 -388.8154 c
251.002 -388.6172 251.3848 -388.3613 251.7158 -388.0459 c
252.0469 -387.6992 252.3057 -387.3066 252.4971 -386.8691 c
252.6875 -386.4307 252.7822 -385.9639 252.7822 -385.4678 c
f
0 D
258.3867 -378.5977 m
261.1143 -378.5977 L
261.1143 -400.7188 L
258.3867 -400.7188 l
258.3867 -378.5977 L
f
*U
*u
271.7949 -396.6768 m
271.7949 -389.8066 L
274.3994 -389.8066 L
274.3994 -396.6768 L
278.0938 -396.6768 L
278.0938 -389.8066 L
280.7227 -389.8066 L
280.7227 -396.6768 L
287.2959 -396.6768 L
287.2959 -399.083 L
266.959 -399.083 L
266.959 -396.6768 l
271.7949 -396.6768 L
f
282.9043 -392.7832 m
282.9043 -382.1699 L
268.5977 -382.1699 L
268.5977 -379.7148 L
285.6572 -379.7148 L
285.6572 -392.7832 l
282.9043 -392.7832 L
f
*U
*u
292.2217 -392.5693 m
312.5576 -392.5693 L
312.5576 -395 L
303.7539 -395 L
303.7539 -400.7041 L
301 -400.7041 L
301 -395 L
292.2217 -395 l
292.2217 -392.5693 L
f
296.5625 -381.7568 m
308.1914 -381.7568 L
308.1914 -378.9551 L
310.9209 -378.9551 L
310.9209 -389.5938 L
293.8584 -389.5938 L
293.8584 -378.9551 L
296.5625 -378.9551 l
296.5625 -381.7568 L
f
1 D
308.1914 -384.1377 m
296.5625 -384.1377 L
296.5625 -387.1885 L
308.1914 -387.1885 l
308.1914 -384.1377 L
f
*U
U
U
u
u
u
u
u
u
u
0 D
1 0.7 0.2 0.4 (GOK_Blue) 0 x
139.8462 -221.1855 m
134.1675 -217.3262 126.894 -218.8999 123.0776 -224.7051 c
119.8872 -229.5532 115.0747 -230.1558 113.2095 -230.1558 c
107.1362 -230.1558 102.9771 -225.8823 101.7476 -221.4609 C
101.7427 -221.4609 L
101.731 -221.4165 101.7222 -221.3813 101.7104 -221.3384 c
101.6987 -221.2886 101.6821 -221.2393 101.6704 -221.1875 c
101.186 -219.3428 101.0688 -218.4609 101.0688 -216.5005 c
101.0688 -205.9258 111.9146 -194.1533 127.5425 -194.1533 c
143.5444 -194.1533 152.6987 -206.334 155.0562 -213.104 c
155.0181 -212.9849 154.98 -212.8667 154.939 -212.7441 c
150.396 -199.5044 137.8423 -189.9834 123.0591 -189.9834 c
104.4556 -189.9834 89.3667 -205.0664 89.3667 -223.6763 c
89.3667 -240.3081 101.3638 -254.5474 118.0044 -254.5474 c
131.2769 -254.5474 140.1968 -247.104 144.2876 -236.8496 c
146.5327 -231.2412 144.9429 -224.6489 139.8462 -221.1855 c
f
U
u
0 1 0.8 0 (GOK_Red) 0 x
155.2661 -213.7612 m
153.3003 -207.1582 144.0767 -194.1533 127.5425 -194.1533 c
111.9146 -194.1533 101.0688 -205.9258 101.0688 -216.5005 c
101.0688 -218.4609 101.186 -219.3428 101.6704 -221.1875 c
101.4683 -220.3813 101.3599 -219.5713 101.3599 -218.7837 c
101.3599 -207.7715 112.3892 -200.1411 123.7222 -200.1411 c
139.0649 -200.1411 151.5024 -212.5796 151.5024 -227.9194 c
151.5024 -239.9478 144.5835 -250.3564 134.5239 -255.3584 C
134.5288 -255.3662 L
147.4917 -250.6719 156.7485 -238.2559 156.7485 -223.6763 c
156.7485 -220.2256 156.2866 -217.1831 155.2661 -213.7612 c
f
U
U
U
U
U
U
u
*u
0 0 0 0.8 k
192.1875 -231.585 m
192.1875 -234.5142 L
174.1616 -234.5142 L
174.1616 -231.585 L
181.3472 -231.585 L
181.3472 -225.8491 L
180.8853 -225.749 180.4429 -225.6079 180.0181 -225.4258 c
179.0532 -225.0249 178.2271 -224.5 177.5454 -223.8564 c
176.8394 -223.1729 176.2817 -222.3872 175.8687 -221.501 c
175.4536 -220.6157 175.2485 -219.6597 175.2485 -218.6323 c
175.2485 -217.6265 175.4536 -216.6802 175.8687 -215.7939 c
176.2817 -214.9097 176.8394 -214.1245 177.5454 -213.4395 c
178.2271 -212.7959 179.0435 -212.2769 179.9897 -211.8843 c
180.9351 -211.4912 181.9321 -211.2949 182.98 -211.2949 c
184.0234 -211.2949 185.0137 -211.4912 185.9395 -211.8843 c
186.8633 -212.2769 187.6797 -212.7959 188.3828 -213.4395 c
189.0879 -214.1245 189.6465 -214.9097 190.0586 -215.7939 c
190.4727 -216.6802 190.6777 -217.6265 190.6777 -218.6323 c
190.6777 -219.6597 190.4727 -220.6157 190.0586 -221.501 c
189.6465 -222.3872 189.0879 -223.1729 188.3828 -223.8564 c
187.6797 -224.5 186.8633 -225.0249 185.9395 -225.4258 c
185.4941 -225.6079 185.0215 -225.749 184.5195 -225.8491 c
184.5195 -231.585 l
192.1875 -231.585 L
f
1 D
187.3867 -218.6323 m
187.3867 -218.0493 187.2715 -217.4902 187.0391 -216.9565 c
186.8066 -216.4238 186.4922 -215.9448 186.0898 -215.522 c
185.6855 -215.1411 185.2207 -214.8281 184.6855 -214.5864 c
184.1504 -214.3447 183.5835 -214.2241 182.98 -214.2241 c
182.3755 -214.2241 181.8071 -214.3447 181.2729 -214.5864 c
180.7397 -214.8281 180.2603 -215.1411 179.8394 -215.522 c
179.4556 -215.9448 179.144 -216.4238 178.9019 -216.9565 c
178.6597 -217.4902 178.5405 -218.0493 178.5405 -218.6323 c
178.5405 -219.2368 178.6597 -219.8057 178.9019 -220.3384 c
179.144 -220.8721 179.4556 -221.3501 179.8394 -221.7725 c
180.2603 -222.1563 180.7397 -222.4673 181.2729 -222.7095 c
181.8071 -222.9507 182.3755 -223.0708 182.98 -223.0708 c
183.5835 -223.0708 184.1504 -222.9507 184.6855 -222.7095 c
185.2207 -222.4673 185.6855 -222.1563 186.0898 -221.7725 c
186.4922 -221.3501 186.8066 -220.8721 187.0391 -220.3384 c
187.2715 -219.8057 187.3867 -219.2368 187.3867 -218.6323 c
f
0 D
194.2129 -210.2681 m
197.5313 -210.2681 L
197.5313 -237.2012 L
194.2129 -237.2012 l
194.2129 -210.2681 L
f
*U
*u
210.5391 -232.2803 m
210.5391 -223.9165 L
213.709 -223.9165 L
213.709 -232.2803 L
218.207 -232.2803 L
218.207 -223.9165 L
221.4063 -223.9165 L
221.4063 -232.2803 L
229.4082 -232.2803 L
229.4082 -235.2095 L
204.6504 -235.2095 L
204.6504 -232.2803 l
210.5391 -232.2803 L
f
224.0645 -227.5396 m
224.0645 -214.6162 L
206.6445 -214.6162 L
206.6445 -211.6279 L
227.416 -211.6279 L
227.416 -227.5396 l
224.0645 -227.5396 L
f
*U
*u
235.4082 -227.2793 m
260.1699 -227.2793 L
260.1699 -230.2383 L
249.4492 -230.2383 L
249.4492 -237.1831 L
246.0977 -237.1831 L
246.0977 -230.2383 L
235.4082 -230.2383 l
235.4082 -227.2793 L
f
240.6914 -214.1152 m
254.8555 -214.1152 L
254.8555 -210.7026 L
258.1758 -210.7026 L
258.1758 -223.6577 L
237.4004 -223.6577 L
237.4004 -210.7026 L
240.6914 -210.7026 l
240.6914 -214.1152 L
f
1 D
254.8555 -217.0137 m
240.6914 -217.0137 L
240.6914 -220.7275 L
254.8555 -220.7275 l
254.8555 -217.0137 L
f
*U
U
U
u
u
*u
0 D
182.2944 -126.8457 m
182.2944 -135.2349 L
180.9468 -135.2349 L
180.9468 -128.4819 L
178.7573 -135.2349 L
177.457 -135.2349 L
175.2666 -128.4819 L
175.2666 -135.2349 L
173.9189 -135.2349 L
173.9189 -126.8457 L
175.9883 -126.8457 L
178.1069 -133.3809 L
180.2251 -126.8457 l
182.2944 -126.8457 L
f
*U
*u
185.6172 -127.5088 m
185.6172 -127.7412 185.5313 -127.9434 185.3584 -128.1152 c
185.1855 -128.2876 184.979 -128.374 184.7393 -128.374 c
184.498 -128.374 184.292 -128.2876 184.1187 -128.1152 c
183.9463 -127.9434 183.8604 -127.7412 183.8604 -127.5088 c
183.8604 -127.2676 183.9463 -127.0605 184.1187 -126.8882 c
184.292 -126.7153 184.498 -126.6294 184.7393 -126.6294 c
184.979 -126.6294 185.1855 -126.7153 185.3584 -126.8882 c
185.5313 -127.0605 185.6172 -127.2676 185.6172 -127.5088 c
f
184.0649 -135.2349 m
184.0649 -129.2046 L
185.437 -129.2046 L
185.437 -135.2349 l
184.0649 -135.2349 L
f
*U
*u
188.5654 -132.2012 m
188.5654 -135.2349 L
187.2056 -135.2349 L
187.2056 -129.2046 L
188.5186 -129.2046 L
188.5186 -130.0117 L
188.6768 -129.73 188.9102 -129.502 189.2158 -129.3252 c
189.5205 -129.1489 189.8486 -129.0596 190.2031 -129.0596 c
190.917 -129.0596 191.4873 -129.3037 191.918 -129.7886 c
192.3467 -130.2734 192.5615 -130.9214 192.5615 -131.7319 c
192.5615 -135.2349 L
191.1885 -135.2349 L
191.1885 -132.082 L
191.1885 -131.4395 191.085 -130.9639 190.876 -130.6548 c
190.667 -130.3467 190.3467 -130.1924 189.9141 -130.1924 c
189.6885 -130.1924 189.4707 -130.2656 189.2568 -130.4136 c
189.0459 -130.5635 188.8828 -130.7651 188.7705 -131.0225 c
188.6338 -131.3188 188.5654 -131.7129 188.5654 -132.2012 c
f
*U
*u
195.835 -127.5088 m
195.835 -127.7412 195.749 -127.9434 195.5771 -128.1152 c
195.4033 -128.2876 195.1973 -128.374 194.9561 -128.374 c
194.7158 -128.374 194.5088 -128.2876 194.3369 -128.1152 c
194.165 -127.9434 194.0771 -127.7412 194.0771 -127.5088 c
194.0771 -127.2676 194.165 -127.0605 194.3369 -126.8882 c
194.5088 -126.7153 194.7158 -126.6294 194.9561 -126.6294 c
195.1973 -126.6294 195.4033 -126.7153 195.5771 -126.8882 c
195.749 -127.0605 195.835 -127.2676 195.835 -127.5088 c
f
194.2822 -135.2349 m
194.2822 -129.2046 L
195.6543 -129.2046 L
195.6543 -135.2349 l
194.2822 -135.2349 L
f
*U
*u
196.8701 -134.1152 m
197.7246 -133.2378 L
197.9658 -133.5664 198.2305 -133.8218 198.5195 -134.0073 c
198.8008 -134.1753 199.1006 -134.2603 199.4229 -134.2603 c
199.7256 -134.2603 199.9854 -134.1982 200.1973 -134.0728 c
200.4102 -133.9492 200.5176 -133.7832 200.5176 -133.5747 c
200.5176 -133.3647 200.4131 -133.2021 200.2109 -133.0864 c
200.0059 -132.9712 199.7646 -132.8604 199.4834 -132.7559 c
199.1533 -132.6519 198.8154 -132.5347 198.4717 -132.4058 c
198.0059 -132.2383 197.665 -132.0215 197.4482 -131.7568 c
197.2305 -131.4912 197.1221 -131.1899 197.1221 -130.853 c
197.1221 -130.3569 197.3564 -129.9336 197.8213 -129.5835 c
198.2861 -129.2354 198.8359 -129.0596 199.4697 -129.0596 c
200.1436 -129.0596 200.6943 -129.2207 201.1191 -129.5415 c
201.335 -129.7109 201.5088 -129.9185 201.6367 -130.168 c
200.7939 -130.9868 L
200.6826 -130.793 200.5498 -130.6367 200.3975 -130.5161 c
200.1338 -130.2837 199.7988 -130.168 199.3975 -130.168 c
199.165 -130.168 198.9639 -130.2266 198.79 -130.3423 c
198.6182 -130.458 198.5322 -130.5962 198.5322 -130.7573 c
198.5322 -130.9331 198.6279 -131.0825 198.8193 -131.2026 c
199.0117 -131.3237 199.2979 -131.4395 199.6748 -131.5513 c
199.8115 -131.5923 199.9678 -131.6411 200.1436 -131.6963 c
200.7295 -131.8882 201.1729 -132.1377 201.4736 -132.4419 c
201.7754 -132.7476 201.9258 -133.1123 201.9258 -133.5371 c
201.9258 -134.0352 201.6855 -134.4663 201.2031 -134.8315 c
200.7217 -135.1958 200.1064 -135.3799 199.3623 -135.3799 c
198.7373 -135.3799 198.1826 -135.2349 197.7021 -134.9458 c
197.3809 -134.7529 197.1025 -134.4761 196.8701 -134.1152 c
f
*U
*u
204.8623 -127.2676 m
204.8623 -129.2046 L
206.1738 -129.2046 L
206.1738 -130.3115 L
204.8623 -130.3115 L
204.8623 -133.3809 L
204.8623 -133.6709 204.9326 -133.8677 205.0713 -133.9766 c
205.2148 -134.0859 205.4121 -134.1396 205.668 -134.1396 c
206.1738 -134.1396 L
206.1738 -135.2349 L
205.3428 -135.2349 L
204.6924 -135.2349 204.2197 -135.0898 203.9238 -134.8022 c
203.626 -134.5122 203.4775 -134.084 203.4775 -133.5146 c
203.4775 -130.3115 L
202.4424 -130.3115 L
202.4424 -129.2046 L
203.4775 -129.2046 L
203.4775 -127.2676 l
204.8623 -127.2676 L
f
*U
*u
207.4131 -135.2349 m
207.4131 -129.2046 L
208.7021 -129.2046 L
208.7021 -130.1074 L
208.9014 -129.8115 209.1465 -129.582 209.4355 -129.4209 c
209.7793 -129.2129 210.1855 -129.1084 210.6514 -129.1084 c
210.7461 -129.1084 L
210.7461 -130.3354 L
210.6035 -130.3354 L
210.0332 -130.3354 209.5801 -130.5083 209.2432 -130.853 c
208.9297 -131.1899 208.7734 -131.7158 208.7734 -132.4307 c
208.7734 -135.2349 l
207.4131 -135.2349 L
f
*U
*u
213.7314 -135.0054 m
211.3604 -129.2046 L
212.7803 -129.2046 L
214.417 -133.3208 L
216.0439 -129.2046 L
217.4512 -129.2046 L
214.0938 -137.5688 L
212.6963 -137.5688 l
213.7314 -135.0054 L
f
*U
*u
224.3232 -135.3799 m
223.4404 -135.3799 222.6885 -135.0757 222.0674 -134.4702 c
221.4453 -133.8643 221.1338 -133.1162 221.1338 -132.2256 c
221.1338 -131.335 221.4453 -130.585 222.0674 -129.9741 c
222.6885 -129.3657 223.4404 -129.0596 224.3232 -129.0596 c
225.2129 -129.0596 225.9688 -129.3657 226.585 -129.9741 c
227.2041 -130.585 227.5127 -131.335 227.5127 -132.2256 c
227.5127 -133.1162 227.2041 -133.8643 226.585 -134.4702 c
225.9688 -135.0757 225.2129 -135.3799 224.3232 -135.3799 c
f
1 D
224.3232 -134.2466 m
224.8203 -134.2466 225.2471 -134.0566 225.6045 -133.6758 c
225.9619 -133.2944 226.1396 -132.811 226.1396 -132.2256 c
226.1396 -131.6475 225.9619 -131.166 225.6045 -130.7749 c
225.2471 -130.3862 224.8203 -130.1924 224.3232 -130.1924 c
223.834 -130.1924 223.4092 -130.3862 223.0537 -130.7749 c
222.6973 -131.166 222.5176 -131.6475 222.5176 -132.2256 c
222.5176 -132.811 222.6973 -133.2944 223.0537 -133.6758 c
223.4092 -134.0566 223.834 -134.2466 224.3232 -134.2466 c
f
*U
*u
0 D
229.0908 -128.5684 m
229.0908 -128.0044 229.248 -127.5781 229.5654 -127.2856 c
229.8818 -126.9927 230.3652 -126.8457 231.0137 -126.8457 c
231.6768 -126.8457 L
231.6768 -127.9414 L
231.2793 -127.9414 L
231.0234 -127.9414 230.8252 -127.9951 230.6836 -128.104 c
230.5449 -128.2114 230.4736 -128.4102 230.4736 -128.7002 c
230.4736 -129.2046 L
231.6768 -129.2046 L
231.6768 -130.3115 L
230.4736 -130.3115 L
230.4736 -135.2349 L
229.0908 -135.2349 L
229.0908 -130.3115 L
228.0547 -130.3115 L
228.0547 -129.2046 L
229.0908 -129.2046 l
229.0908 -128.5684 L
f
*U
U
u
*u
239.3252 -135.1743 m
237.915 -135.1743 L
237.915 -126.7852 L
243.2354 -126.7852 L
243.2354 -127.9536 L
239.3252 -127.9536 L
239.3252 -130.3838 L
243.127 -130.3838 L
243.127 -131.5396 L
239.3252 -131.5396 l
239.3252 -135.1743 L
f
*U
*u
247.459 -135.3188 m
246.5791 -135.3188 245.8252 -135.0161 245.2041 -134.4102 c
244.582 -133.8052 244.2715 -133.0562 244.2715 -132.1655 c
244.2715 -131.2739 244.582 -130.5254 245.2041 -129.915 c
245.8252 -129.3047 246.5791 -129 247.459 -129 c
248.3506 -129 249.1045 -129.3047 249.7227 -129.915 c
250.3408 -130.5254 250.6494 -131.2739 250.6494 -132.1655 c
250.6494 -133.0562 250.3408 -133.8052 249.7227 -134.4102 c
249.1045 -135.0161 248.3506 -135.3188 247.459 -135.3188 c
f
1 D
247.459 -134.188 m
247.958 -134.188 248.3838 -133.9971 248.7422 -133.6147 c
249.0996 -133.2334 249.2773 -132.75 249.2773 -132.1655 c
249.2773 -131.5879 249.0996 -131.1045 248.7422 -130.7158 c
248.3838 -130.3267 247.958 -130.1313 247.459 -130.1313 c
246.9697 -130.1313 246.5469 -130.3267 246.1895 -130.7158 c
245.833 -131.1045 245.6543 -131.5879 245.6543 -132.1655 c
245.6543 -132.75 245.833 -133.2334 246.1895 -133.6147 c
246.5469 -133.9971 246.9697 -134.188 247.459 -134.188 c
f
*U
*u
0 D
251.9248 -135.1743 m
251.9248 -129.1436 L
253.2139 -129.1436 L
253.2139 -130.0469 L
253.4131 -129.7505 253.6592 -129.5229 253.9473 -129.3613 c
254.292 -129.1528 254.6973 -129.0474 255.1631 -129.0474 c
255.2588 -129.0474 L
255.2588 -130.2764 L
255.1143 -130.2764 L
254.5449 -130.2764 254.0908 -130.4487 253.7539 -130.7939 c
253.4414 -131.1309 253.2852 -131.6567 253.2852 -132.3696 c
253.2852 -135.1743 l
251.9248 -135.1743 L
f
*U
*u
257.209 -132.7666 m
257.2881 -133.1362 257.4609 -133.437 257.7266 -133.6699 c
258.1104 -134.0229 258.6211 -134.1992 259.2529 -134.1992 c
259.9209 -134.1992 260.542 -133.9546 261.1201 -133.4648 c
261.5293 -134.4756 L
260.8799 -135.0371 260.1084 -135.3188 259.2197 -135.3188 c
258.1982 -135.3188 257.3701 -135.0293 256.7344 -134.4512 c
256.0947 -133.875 255.7773 -133.1167 255.7773 -132.1772 c
255.7773 -131.2549 256.0586 -130.4941 256.624 -129.897 c
257.1914 -129.2998 257.9316 -129 258.8457 -129 c
259.7432 -129 260.4814 -129.2964 261.0537 -129.8901 c
261.6279 -130.4849 261.9141 -131.2188 261.9141 -132.0928 c
261.9141 -132.3335 261.8945 -132.5586 261.8525 -132.7666 c
257.209 -132.7666 L
f
1 D
257.1846 -131.6841 m
260.5303 -131.6841 L
260.5137 -131.29 260.3496 -130.9321 260.0361 -130.6069 c
259.7246 -130.2808 259.3271 -130.1196 258.8457 -130.1196 c
258.3467 -130.1196 257.9375 -130.2959 257.6182 -130.6489 c
257.3848 -130.9146 257.2402 -131.2578 257.1846 -131.6841 c
f
*U
*u
0 D
264.7666 -127.4473 m
264.7666 -127.6802 264.6807 -127.8838 264.5078 -128.0547 c
264.335 -128.2271 264.1289 -128.3145 263.8887 -128.3145 c
263.6475 -128.3145 263.4414 -128.2271 263.2686 -128.0547 c
263.0957 -127.8838 263.0098 -127.6802 263.0098 -127.4473 c
263.0098 -127.2065 263.0957 -127 263.2686 -126.8276 c
263.4414 -126.6548 263.6475 -126.5684 263.8887 -126.5684 c
264.1289 -126.5684 264.335 -126.6548 264.5078 -126.8276 c
264.6807 -127 264.7666 -127.2065 264.7666 -127.4473 c
f
263.2148 -135.1743 m
263.2148 -129.1436 L
264.5859 -129.1436 L
264.5859 -135.1743 l
263.2148 -135.1743 L
f
*U
*u
268.8223 -137.5698 m
267.8994 -137.5698 267.1104 -137.3403 266.4531 -136.8833 c
266.8604 -135.7876 L
267.4697 -136.2368 268.125 -136.4614 268.8223 -136.4614 c
269.4326 -136.4614 269.9111 -136.2891 270.2607 -135.9438 c
270.6094 -135.5986 270.7852 -135.2095 270.7852 -134.7764 c
270.7852 -134.4155 L
270.2861 -135.0181 269.6572 -135.3188 268.8955 -135.3188 c
268.0107 -135.3188 267.2969 -135.0059 266.7529 -134.3794 c
266.2061 -133.7544 265.9336 -133.0161 265.9336 -132.1655 c
265.9336 -131.3149 266.2061 -130.5757 266.7529 -129.9443 c
267.2969 -129.3145 268.0107 -129 268.8955 -129 c
269.6084 -129 270.2227 -129.2881 270.7363 -129.8657 c
270.7363 -129.1436 L
272.1084 -129.1436 L
272.1084 -134.1519 L
272.1084 -135.2974 271.8232 -136.1553 271.2539 -136.7202 c
270.6836 -137.2866 269.873 -137.5698 268.8223 -137.5698 c
f
1 D
270.7246 -132.561 m
270.7471 -132.2896 270.7471 -132.0259 270.7246 -131.769 c
270.6768 -131.3096 270.5078 -130.9292 270.2188 -130.6245 c
269.8965 -130.2876 269.5 -130.1196 269.0273 -130.1196 c
268.4961 -130.1196 268.082 -130.3154 267.7754 -130.709 c
267.4697 -131.1025 267.3174 -131.5879 267.3174 -132.1655 c
267.3174 -132.75 267.4697 -133.2373 267.7754 -133.6211 c
268.082 -134.0063 268.4961 -134.1992 269.0273 -134.1992 c
269.5 -134.1992 269.8965 -134.0313 270.2188 -133.6943 c
270.5078 -133.3887 270.6768 -133.0122 270.7246 -132.561 c
f
*U
*u
0 D
275.1406 -132.1421 m
275.1406 -135.1743 L
273.7793 -135.1743 L
273.7793 -129.1436 L
275.0928 -129.1436 L
275.0928 -129.9507 L
275.2539 -129.6689 275.4863 -129.4414 275.792 -129.2651 c
276.0957 -129.0879 276.4238 -129 276.7764 -129 c
277.4922 -129 278.0635 -129.2427 278.4922 -129.728 c
278.9219 -130.2144 279.1367 -130.8618 279.1367 -131.6714 c
279.1367 -135.1743 L
277.7656 -135.1743 L
277.7656 -132.021 L
277.7656 -131.3799 277.6611 -130.9043 277.4512 -130.5952 c
277.2422 -130.2861 276.9219 -130.1313 276.4893 -130.1313 c
276.2646 -130.1313 276.0459 -130.2041 275.833 -130.3545 c
275.6211 -130.502 275.458 -130.7041 275.3467 -130.9609 c
275.209 -131.2578 275.1406 -131.6514 275.1406 -132.1421 c
f
*U
*u
288.3916 -126.7852 m
291.3281 -135.1743 L
289.8965 -135.1743 L
289.0537 -132.7061 L
285.8291 -132.7061 L
284.9854 -135.1743 L
283.5527 -135.1743 L
286.4775 -126.7852 l
288.3916 -126.7852 L
f
1 D
286.2256 -131.5396 m
288.6572 -131.5396 L
287.4531 -128.0137 l
286.2256 -131.5396 L
f
*U
*u
0 D
292.293 -128.5068 m
292.293 -127.9453 292.4502 -127.5171 292.7666 -127.2241 c
293.084 -126.9312 293.5684 -126.7852 294.2168 -126.7852 c
294.8789 -126.7852 L
294.8789 -127.8804 L
294.4814 -127.8804 L
294.2256 -127.8804 294.0273 -127.936 293.8867 -128.043 c
293.7461 -128.1523 293.6758 -128.3511 293.6758 -128.6387 c
293.6758 -129.1436 L
294.8789 -129.1436 L
294.8789 -130.252 L
293.6758 -130.252 L
293.6758 -135.1743 L
292.293 -135.1743 L
292.293 -130.252 L
291.2568 -130.252 L
291.2568 -129.1436 L
292.293 -129.1436 l
292.293 -128.5068 L
f
*U
*u
296.7568 -128.5068 m
296.7568 -127.9453 296.916 -127.5171 297.2324 -127.2241 c
297.5488 -126.9312 298.0332 -126.7852 298.6816 -126.7852 c
299.3447 -126.7852 L
299.3447 -127.8804 L
298.9473 -127.8804 L
298.6904 -127.8804 298.4922 -127.936 298.3506 -128.043 c
298.2109 -128.1523 298.1406 -128.3511 298.1406 -128.6387 c
298.1406 -129.1436 L
299.3447 -129.1436 L
299.3447 -130.252 L
298.1406 -130.252 L
298.1406 -135.1743 L
296.7568 -135.1743 L
296.7568 -130.252 L
295.7217 -130.252 L
295.7217 -129.1436 L
296.7568 -129.1436 l
296.7568 -128.5068 L
f
*U
*u
302.9912 -131.2876 m
303.4482 -131.2876 303.9219 -131.2876 304.4121 -131.2876 c
304.4121 -130.8931 304.2588 -130.5986 303.9551 -130.4014 c
303.6484 -130.2041 303.208 -130.1069 302.6299 -130.1069 c
302.5938 -130.1069 L
302.0488 -130.1069 301.4707 -130.2358 300.8623 -130.4927 c
300.5117 -129.4219 L
301.1455 -129.1484 301.8438 -129.0083 302.6055 -129 c
302.6299 -129 L
303.6426 -129 304.418 -129.1938 304.959 -129.583 c
305.501 -129.9731 305.7705 -130.5918 305.7705 -131.4434 c
305.7705 -135.1743 L
304.4727 -135.1743 L
304.4727 -134.5132 L
304.2148 -134.7686 303.9004 -134.9673 303.5264 -135.1069 c
303.1533 -135.2485 302.7744 -135.3188 302.3887 -135.3188 c
301.667 -135.3188 301.083 -135.1284 300.6387 -134.7476 c
300.1924 -134.3662 299.9707 -133.8994 299.9707 -133.3447 c
299.9707 -132.7275 300.2471 -132.2183 300.8018 -131.8159 c
301.3145 -131.4629 302.0449 -131.2876 302.9912 -131.2876 c
f
1 D
302.6182 -134.2363 m
302.9707 -134.2363 303.3213 -134.1479 303.665 -133.9756 c
304.0117 -133.8052 304.2588 -133.6064 304.4121 -133.3799 c
304.4121 -132.3584 L
303.9619 -132.3584 303.5566 -132.3584 303.1953 -132.3584 c
302.5059 -132.3584 302.0244 -132.4458 301.752 -132.6235 c
301.4863 -132.8232 301.3555 -133.064 301.3555 -133.3447 c
301.3555 -133.6016 301.4658 -133.8149 301.6924 -133.9824 c
301.916 -134.1519 302.2266 -134.2363 302.6182 -134.2363 c
f
*U
*u
0 D
309.0449 -127.4473 m
309.0449 -127.6802 308.96 -127.8838 308.7871 -128.0547 c
308.6143 -128.2271 308.4072 -128.3145 308.166 -128.3145 c
307.9258 -128.3145 307.7197 -128.2271 307.5469 -128.0547 c
307.375 -127.8838 307.2871 -127.6802 307.2871 -127.4473 c
307.2871 -127.2065 307.375 -127 307.5469 -126.8276 c
307.7197 -126.6548 307.9258 -126.5684 308.166 -126.5684 c
308.4072 -126.5684 308.6143 -126.6548 308.7871 -126.8276 c
308.96 -127 309.0449 -127.2065 309.0449 -127.4473 c
f
307.4922 -135.1743 m
307.4922 -129.1436 L
308.8652 -129.1436 L
308.8652 -135.1743 l
307.4922 -135.1743 L
f
*U
*u
310.6328 -135.1743 m
310.6328 -129.1436 L
311.9219 -129.1436 L
311.9219 -130.0469 L
312.1211 -129.7505 312.3682 -129.5229 312.6553 -129.3613 c
313 -129.1528 313.4053 -129.0474 313.8721 -129.0474 c
313.9668 -129.0474 L
313.9668 -130.2764 L
313.8232 -130.2764 L
313.2529 -130.2764 312.7988 -130.4487 312.4619 -130.7939 c
312.1514 -131.1309 311.9941 -131.6567 311.9941 -132.3696 c
311.9941 -135.1743 l
310.6328 -135.1743 L
f
*U
*u
314.4727 -134.0542 m
315.3281 -133.1768 L
315.5674 -133.5054 315.833 -133.7607 316.1211 -133.9463 c
316.4023 -134.1143 316.7031 -134.1992 317.0244 -134.1992 c
317.3291 -134.1992 317.5889 -134.1367 317.8008 -134.0137 c
318.0127 -133.8882 318.1191 -133.7217 318.1191 -133.5137 c
318.1191 -133.3052 318.0176 -133.1426 317.8125 -133.0254 c
317.6074 -132.9097 317.3652 -132.7993 317.083 -132.6948 c
316.7559 -132.5908 316.4199 -132.4736 316.0742 -132.3467 c
315.6084 -132.1772 315.2666 -131.9604 315.0508 -131.6953 c
314.834 -131.4316 314.7256 -131.1309 314.7256 -130.7939 c
314.7256 -130.2959 314.958 -129.873 315.4248 -129.5244 c
315.8887 -129.1738 316.4385 -129 317.0723 -129 c
317.7451 -129 318.2959 -129.1611 318.7217 -129.4819 c
318.9385 -129.6494 319.1104 -129.8594 319.2383 -130.1069 c
318.3955 -130.9258 L
318.2842 -130.7334 318.1514 -130.5771 318 -130.457 c
317.7354 -130.2246 317.4023 -130.1069 317 -130.1069 c
316.7686 -130.1069 316.5645 -130.1655 316.3916 -130.2808 c
316.2217 -130.3984 316.1328 -130.5366 316.1328 -130.6963 c
316.1328 -130.873 316.2295 -131.022 316.4238 -131.1426 c
316.6162 -131.2627 316.8994 -131.3799 317.2773 -131.4922 c
317.4131 -131.5308 317.5693 -131.5801 317.7451 -131.6353 c
318.3311 -131.8291 318.7744 -132.0762 319.0762 -132.3828 c
319.377 -132.6885 319.5273 -133.0513 319.5273 -133.4761 c
319.5273 -133.9746 319.2871 -134.4053 318.8057 -134.7705 c
318.3242 -135.1362 317.7109 -135.3188 316.9648 -135.3188 c
316.3379 -135.3188 315.7852 -135.1743 315.3027 -134.8857 c
314.9814 -134.6919 314.7061 -134.4155 314.4727 -134.0542 c
f
*U
U
u
u
u
u
u
u
1 0.7 0.2 0.4 (GOK_Blue) 0 x
139.8462 -112.377 m
134.1675 -108.5176 126.894 -110.0913 123.0776 -115.8965 c
119.8872 -120.7446 115.0747 -121.3472 113.2095 -121.3472 c
107.1362 -121.3472 102.9771 -117.0737 101.7476 -112.6523 C
101.7427 -112.6523 L
101.731 -112.6079 101.7222 -112.5728 101.7104 -112.5298 c
101.6987 -112.48 101.6821 -112.4307 101.6704 -112.3789 c
101.186 -110.5342 101.0688 -109.6523 101.0688 -107.6919 c
101.0688 -97.1172 111.9146 -85.3447 127.5425 -85.3447 c
143.5444 -85.3447 152.6987 -97.5254 155.0562 -104.2954 c
155.0181 -104.1763 154.98 -104.0581 154.939 -103.9355 c
150.396 -90.6958 137.8423 -81.1748 123.0591 -81.1748 c
104.4556 -81.1748 89.3667 -96.2578 89.3667 -114.8677 c
89.3667 -131.4995 101.3638 -145.7388 118.0044 -145.7388 c
131.2769 -145.7388 140.1968 -138.2954 144.2876 -128.041 c
146.5327 -122.4326 144.9429 -115.8403 139.8462 -112.377 c
f
U
u
0 1 0.8 0 (GOK_Red) 0 x
155.2661 -104.9526 m
153.3003 -98.3496 144.0767 -85.3447 127.5425 -85.3447 c
111.9146 -85.3447 101.0688 -97.1172 101.0688 -107.6919 c
101.0688 -109.6523 101.186 -110.5342 101.6704 -112.3789 c
101.4683 -111.5728 101.3599 -110.7627 101.3599 -109.9751 c
101.3599 -98.9629 112.3892 -91.3325 123.7222 -91.3325 c
139.0649 -91.3325 151.5024 -103.771 151.5024 -119.1108 c
151.5024 -131.1392 144.5835 -141.5479 134.5239 -146.5498 C
134.5288 -146.5576 L
147.4917 -141.8633 156.7485 -129.4473 156.7485 -114.8677 c
156.7485 -111.417 156.2866 -108.3745 155.2661 -104.9526 c
f
U
U
U
U
U
U
u
*u
0 0 0 0.8 k
189.8721 -112.4648 m
189.8721 -115.1802 L
173.1616 -115.1802 L
173.1616 -112.4648 L
179.8228 -112.4648 L
179.8228 -107.1475 L
179.3945 -107.0552 178.9844 -106.9243 178.5903 -106.7554 c
177.6963 -106.3838 176.9302 -105.8975 176.2988 -105.3008 c
175.6436 -104.667 175.127 -103.9385 174.7441 -103.1167 c
174.3594 -102.2964 174.1689 -101.4102 174.1689 -100.4575 c
174.1689 -99.5254 174.3594 -98.6479 174.7441 -97.8267 c
175.127 -97.0068 175.6436 -96.2793 176.2988 -95.644 c
176.9302 -95.0474 177.687 -94.5664 178.5645 -94.2021 c
179.4409 -93.8379 180.3647 -93.6558 181.3364 -93.6558 c
182.3032 -93.6558 183.2217 -93.8379 184.0796 -94.2021 c
184.936 -94.5664 185.6929 -95.0474 186.3447 -95.644 c
186.9985 -96.2793 187.5166 -97.0068 187.8984 -97.8267 c
188.2822 -98.6479 188.4717 -99.5254 188.4717 -100.4575 c
188.4717 -101.4102 188.2822 -102.2964 187.8984 -103.1167 c
187.5166 -103.9385 186.9985 -104.667 186.3447 -105.3008 c
185.6929 -105.8975 184.936 -106.3838 184.0796 -106.7554 c
183.667 -106.9243 183.229 -107.0552 182.7632 -107.1475 c
182.7632 -112.4648 l
189.8721 -112.4648 L
f
1 D
185.4214 -100.4575 m
185.4214 -99.917 185.3145 -99.3989 185.0991 -98.9043 c
184.8838 -98.4106 184.5918 -97.9668 184.2192 -97.5742 c
183.8447 -97.2217 183.4136 -96.9312 182.917 -96.7075 c
182.4214 -96.4834 181.896 -96.3711 181.3364 -96.3711 c
180.7759 -96.3711 180.249 -96.4834 179.7539 -96.7075 c
179.2593 -96.9312 178.8149 -97.2217 178.4248 -97.5742 c
178.0693 -97.9668 177.7803 -98.4106 177.5562 -98.9043 c
177.3311 -99.3989 177.2207 -99.917 177.2207 -100.4575 c
177.2207 -101.0181 177.3311 -101.5454 177.5562 -102.0396 c
177.7803 -102.5342 178.0693 -102.9771 178.4248 -103.3687 c
178.8149 -103.7246 179.2593 -104.0132 179.7539 -104.2373 c
180.249 -104.4609 180.7759 -104.5723 181.3364 -104.5723 c
181.896 -104.5723 182.4214 -104.4609 182.917 -104.2373 c
183.4136 -104.0132 183.8447 -103.7246 184.2192 -103.3687 c
184.5918 -102.9771 184.8838 -102.5342 185.0991 -102.0396 c
185.3145 -101.5454 185.4214 -101.0181 185.4214 -100.4575 c
f
0 D
191.75 -92.7041 m
194.8252 -92.7041 L
194.8252 -117.6714 L
191.75 -117.6714 l
191.75 -92.7041 L
f
*U
*u
206.8838 -113.1094 m
206.8838 -105.3564 L
209.8232 -105.3564 L
209.8232 -113.1094 L
213.9922 -113.1094 L
213.9922 -105.3564 L
216.958 -105.3564 L
216.958 -113.1094 L
224.375 -113.1094 L
224.375 -115.8247 L
201.4248 -115.8247 L
201.4248 -113.1094 l
206.8838 -113.1094 L
f
219.4219 -108.7148 m
219.4219 -96.7349 L
203.2725 -96.7349 L
203.2725 -93.9648 L
222.5293 -93.9648 L
222.5293 -108.7148 l
219.4219 -108.7148 L
f
*U
*u
229.9375 -108.4736 m
252.8926 -108.4736 L
252.8926 -111.2168 L
242.9541 -111.2168 L
242.9541 -117.6543 L
239.8467 -117.6543 L
239.8467 -111.2168 L
229.9375 -111.2168 l
229.9375 -108.4736 L
f
234.8359 -96.27 m
247.9648 -96.27 L
247.9648 -93.1069 L
251.0439 -93.1069 L
251.0439 -105.1162 L
231.7842 -105.1162 L
231.7842 -93.1069 L
234.8359 -93.1069 l
234.8359 -96.27 L
f
1 D
247.9648 -98.957 m
234.8359 -98.957 L
234.8359 -102.4004 L
247.9648 -102.4004 l
247.9648 -98.957 L
f
*U
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
